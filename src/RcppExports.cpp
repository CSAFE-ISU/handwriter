// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cleanBinaryImage
arma::mat cleanBinaryImage(arma::mat img);
RcppExport SEXP _handwriter_cleanBinaryImage(SEXP imgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type img(imgSEXP);
    rcpp_result_gen = Rcpp::wrap(cleanBinaryImage(img));
    return rcpp_result_gen;
END_RCPP
}
// getGraphInfo_cpp
Rcpp::List getGraphInfo_cpp(const Rcpp::List& imageList1, const Rcpp::List& imageList2, bool isProto1, bool isProto2, int numPathCuts);
RcppExport SEXP _handwriter_getGraphInfo_cpp(SEXP imageList1SEXP, SEXP imageList2SEXP, SEXP isProto1SEXP, SEXP isProto2SEXP, SEXP numPathCutsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type imageList1(imageList1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type imageList2(imageList2SEXP);
    Rcpp::traits::input_parameter< bool >::type isProto1(isProto1SEXP);
    Rcpp::traits::input_parameter< bool >::type isProto2(isProto2SEXP);
    Rcpp::traits::input_parameter< int >::type numPathCuts(numPathCutsSEXP);
    rcpp_result_gen = Rcpp::wrap(getGraphInfo_cpp(imageList1, imageList2, isProto1, isProto2, numPathCuts));
    return rcpp_result_gen;
END_RCPP
}
// addToFeatures
List addToFeatures(List FeatureSet, List LetterList, IntegerVector vectorDims);
RcppExport SEXP _handwriter_addToFeatures(SEXP FeatureSetSEXP, SEXP LetterListSEXP, SEXP vectorDimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type FeatureSet(FeatureSetSEXP);
    Rcpp::traits::input_parameter< List >::type LetterList(LetterListSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type vectorDims(vectorDimsSEXP);
    rcpp_result_gen = Rcpp::wrap(addToFeatures(FeatureSet, LetterList, vectorDims));
    return rcpp_result_gen;
END_RCPP
}
// rgba2rgb
arma::cube rgba2rgb(arma::cube img);
RcppExport SEXP _handwriter_rgba2rgb(SEXP imgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type img(imgSEXP);
    rcpp_result_gen = Rcpp::wrap(rgba2rgb(img));
    return rcpp_result_gen;
END_RCPP
}
// rgb2grayscale
arma::mat rgb2grayscale(arma::cube img);
RcppExport SEXP _handwriter_rgb2grayscale(SEXP imgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type img(imgSEXP);
    rcpp_result_gen = Rcpp::wrap(rgb2grayscale(img));
    return rcpp_result_gen;
END_RCPP
}
// whichToFill
arma::uvec whichToFill(arma::mat img);
RcppExport SEXP _handwriter_whichToFill(SEXP imgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type img(imgSEXP);
    rcpp_result_gen = Rcpp::wrap(whichToFill(img));
    return rcpp_result_gen;
END_RCPP
}
// thinImage
arma::uvec thinImage(arma::mat img);
RcppExport SEXP _handwriter_thinImage(SEXP imgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type img(imgSEXP);
    rcpp_result_gen = Rcpp::wrap(thinImage(img));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_handwriter_cleanBinaryImage", (DL_FUNC) &_handwriter_cleanBinaryImage, 1},
    {"_handwriter_getGraphInfo_cpp", (DL_FUNC) &_handwriter_getGraphInfo_cpp, 5},
    {"_handwriter_addToFeatures", (DL_FUNC) &_handwriter_addToFeatures, 3},
    {"_handwriter_rgba2rgb", (DL_FUNC) &_handwriter_rgba2rgb, 1},
    {"_handwriter_rgb2grayscale", (DL_FUNC) &_handwriter_rgb2grayscale, 1},
    {"_handwriter_whichToFill", (DL_FUNC) &_handwriter_whichToFill, 1},
    {"_handwriter_thinImage", (DL_FUNC) &_handwriter_thinImage, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_handwriter(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
