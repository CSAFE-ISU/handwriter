[
  {
    "objectID": "CITATION.html",
    "href": "CITATION.html",
    "title": "Citation",
    "section": "",
    "text": "Citation\nTo cite package ‘handwriter’ in publications use:\n\n  Iowa State University of Science and Technology on behalf of its Center for\n  Statistics and Applications in Forensic Evidence, Berry N, Reinders S,\n  Taylor J (2024). _handwriter: Handwriting Analysis in R_. R package version\n  3.1.1.9000, commit 32d80c5bc8919f4cef91c518b1e77ae7cba5651e,\n  &lt;https://github.com/CSAFE-ISU/handwriter&gt;.\n\nA BibTeX entry for LaTeX users is\n\n  @Manual{,\n    title = {handwriter: Handwriting Analysis in R},\n    author = {{Iowa State University of Science and Technology on behalf of its Center for Statistics and Applications in Forensic Evidence} and Nick Berry and Stephanie Reinders and James Taylor},\n    year = {2024},\n    note = {R package version 3.1.1.9000, commit 32d80c5bc8919f4cef91c518b1e77ae7cba5651e},\n    url = {https://github.com/CSAFE-ISU/handwriter},\n  }"
  },
  {
    "objectID": "NEWS.html",
    "href": "NEWS.html",
    "title": "handwriter 3.2.0",
    "section": "",
    "text": "The new function plot_cluster_centers() creates a plot of the clusters centers from a cluster template. The cluster centers are displayed as orange shapes. The function also plots all graphs in each cluster as grey shapes with 5% transparency to depict the variability of graph shapes within each cluster.\nThe new function plotGraphs() plots every graph in a document processed with processDocument().\n\n\n\n\n\nFixed bug in processDocument() when the writing in the document is a single connected component, such as a single word written in cursive. Previously, the output of processDocument() for this kind of document was formatted incorrectly.\nFixed bug in get_credible_intervals() and plot_credible_intervals() where the model writers were numbered sequentially. Now these functions use the writer IDs.\nFixed bug in format_template_data() where the function coerced writer IDs to integers even if the writer IDs contained characters.\nFixed bug in get_clusters_batch() where the function would stall but not return an error message if a document had a graph with a large number of edges (paths). Now the function ignores graphs with more than 30 edges.\nFixed bug in fit_model() where the function saves the same data in two separate files: “model_clusters.rds” and “all_clusters.rds”. The argument ‘save_master_file’ was added to get_clusters_batch(). If TRUE, a data frame of all cluster assignments, “all_clusters.rds”, will be saved. The default is FALSE."
  },
  {
    "objectID": "NEWS.html#new-features",
    "href": "NEWS.html#new-features",
    "title": "handwriter 3.2.0",
    "section": "",
    "text": "The new function plot_cluster_centers() creates a plot of the clusters centers from a cluster template. The cluster centers are displayed as orange shapes. The function also plots all graphs in each cluster as grey shapes with 5% transparency to depict the variability of graph shapes within each cluster.\nThe new function plotGraphs() plots every graph in a document processed with processDocument()."
  },
  {
    "objectID": "NEWS.html#minor-improvements-and-fixes",
    "href": "NEWS.html#minor-improvements-and-fixes",
    "title": "handwriter 3.2.0",
    "section": "",
    "text": "Fixed bug in processDocument() when the writing in the document is a single connected component, such as a single word written in cursive. Previously, the output of processDocument() for this kind of document was formatted incorrectly.\nFixed bug in get_credible_intervals() and plot_credible_intervals() where the model writers were numbered sequentially. Now these functions use the writer IDs.\nFixed bug in format_template_data() where the function coerced writer IDs to integers even if the writer IDs contained characters.\nFixed bug in get_clusters_batch() where the function would stall but not return an error message if a document had a graph with a large number of edges (paths). Now the function ignores graphs with more than 30 edges.\nFixed bug in fit_model() where the function saves the same data in two separate files: “model_clusters.rds” and “all_clusters.rds”. The argument ‘save_master_file’ was added to get_clusters_batch(). If TRUE, a data frame of all cluster assignments, “all_clusters.rds”, will be saved. The default is FALSE."
  },
  {
    "objectID": "NEWS.html#patches",
    "href": "NEWS.html#patches",
    "title": "handwriter 3.2.0",
    "section": "Patches",
    "text": "Patches\n\nThe functions fit_model() and analyze_questioned_documents() now allow writer IDs that contain numbers and letters."
  },
  {
    "objectID": "NEWS.html#minor-improvements-and-fixes-1",
    "href": "NEWS.html#minor-improvements-and-fixes-1",
    "title": "handwriter 3.2.0",
    "section": "Minor improvements and fixes",
    "text": "Minor improvements and fixes\n\nIncreased the speed of processHandwriting() by changing the function to process a handwritten document in sections instead of all at once. Nodes created by processHandwriting() in version 3.1.0 might differ slightly in placement from previous versions.\nFixed bugs in fit_model() and analyze_questioned_documents() introduced by the changes to process_batch_list() in version 3.0.0."
  },
  {
    "objectID": "NEWS.html#new-features-1",
    "href": "NEWS.html#new-features-1",
    "title": "handwriter 3.2.0",
    "section": "New features",
    "text": "New features\n\nfit_model() allows the user to fit a statistical model to known handwriting samples collected from a closed-set of persons.\nanalyze_questioned_documents() in conjunction with a model created by fit_model() allows a user to calculate the posterior probability that each known writer in the model is the writer of the questioned document(s). analyze_questioned_documents() only works when the questioned document(s) had to have been written by one of the model writers. This function must NOT be used if someone other than one of the model writers could written the questioned document(s) as it could yield misleading results."
  },
  {
    "objectID": "NEWS.html#minor-improvements-and-fixes-2",
    "href": "NEWS.html#minor-improvements-and-fixes-2",
    "title": "handwriter 3.2.0",
    "section": "Minor improvements and fixes",
    "text": "Minor improvements and fixes\n\nprocessDocument() is a new wrapper function that runs readPNGBinary(), thinImage(), and processHandwriting() so the user doesn’t need to run these functions individually.\nplotImage(), plotImageThinned(), and plotNodes now only need one input, a document processed with processDocument()\nprocessHandwriting() no longer crashes when the input writing is a single letter or word\nread_and_process() superseded in favor of processDocument()\nextractGraphs() superseded in favor of process_batch_dir()"
  },
  {
    "objectID": "vignettes/handwriter.html",
    "href": "vignettes/handwriter.html",
    "title": "analyze-writing",
    "section": "",
    "text": "This tutorial explains how to perform handwriting analysis on questioned documents using handwriter. In particular, handwriter addresses the scenario where an investigator has a questioned handwritten document, a group of persons of interest has been identified, and the questioned document had to have been written by one of the persons of interest. For example, imagine that a handwritten bomb threat was left at a office building’s main desk and the police discover that the note had to have been written by one of the one hundred employees working that day. More details on this method can be found in [Crawford 2022]."
  },
  {
    "objectID": "vignettes/handwriter.html#introduction",
    "href": "vignettes/handwriter.html#introduction",
    "title": "analyze-writing",
    "section": "",
    "text": "This tutorial explains how to perform handwriting analysis on questioned documents using handwriter. In particular, handwriter addresses the scenario where an investigator has a questioned handwritten document, a group of persons of interest has been identified, and the questioned document had to have been written by one of the persons of interest. For example, imagine that a handwritten bomb threat was left at a office building’s main desk and the police discover that the note had to have been written by one of the one hundred employees working that day. More details on this method can be found in [Crawford 2022]."
  },
  {
    "objectID": "vignettes/handwriter.html#step-1-create-the-main-directory-and-subdirectories",
    "href": "vignettes/handwriter.html#step-1-create-the-main-directory-and-subdirectories",
    "title": "analyze-writing",
    "section": "STEP 1: Create the Main Directory and Subdirectories",
    "text": "STEP 1: Create the Main Directory and Subdirectories\nCreate a new folder called main_dir on your computer to hold the handwriting documents to be analyzed. When we create a new clustering template and fit a statistical model, those files will also be stored in this folder. Create a sub-folder in main_dir called data. In the data folder, create sub-folders called model_docs, questioned_docs, and template_docs. The folder structure will look like this:\n├── main_dir\n│   ├── data  \n│   │   ├── model_docs\n│   │   ├── questioned_docs\n│   │   ├── template_docs"
  },
  {
    "objectID": "vignettes/handwriter.html#step-2-create-a-cluster-template",
    "href": "vignettes/handwriter.html#step-2-create-a-cluster-template",
    "title": "analyze-writing",
    "section": "STEP 2: Create a Cluster Template",
    "text": "STEP 2: Create a Cluster Template\nSave the handwritten documents that you want to use to train a new cluster template as PNG images in main_dir &gt; data &gt; template_docs. The template training documents need to be from writers that are NOT people of interest. Name all of the PNG images with a consistent format that includes an ID for the writer. For example, the PNG images could be named “writer0001.png”, “writer0002.png”, “writer0003.png” and so on.\nNext, create a new cluster template from the documents in main_dir &gt; data &gt; template_docs with the function make_clustering_template. This function\n\nProcesses the template training documents in template_docs, decomposing the handwriting into component shapes called graphs. The processed graphs are saved in RDS files in main_dir \\&gt; data \\&gt; template_graphs.\nDeletes graphs with more than 30 edges.\nRandomly selects K starting cluster centers using seed centers_seed for reproducibility.\nRuns a K-means algorithm with the K starting cluster centers and the selected graphs. The algorithm iteratively groups the selected graphs into K clusters. The final grouping of K clusters is the cluster template.\nStores the writer ID for each training document. writer_indices is a vector of the start and stop characters of the writer ID in the PNG image file name. For example, if the PNG images are named “writer0001.png”, “writer0002.png”, “writer0003.png”, and so on, writer_indices = c(7,10)\nPerforms some of the processes in parallel. Set the number of cores for parallel processing with num_dist_cores.\n\n\ntemplate &lt;- make_clustering_template(\n  main_dir = \"path/to/main_dir\",\n  template_docs = \"path/to/main_dir/data/template_docs\",\n  writer_indices = c(7,10),\n  centers_seed = 100,\n  K = 40,\n  num_dist_cores = 4,\n  max_iters = 25)\n\nType ?make_clustering_template in the RStudio console for more information about the function’s arguments.\nFor the remainder of this tutorial, we use a small example cluster template, example_cluster_template included in handwriter.\n\ntemplate &lt;- example_cluster_template\n\nThe idea behind the cluster template and the hierarchical model is that we can decompose a handwritten document into component graphs, assign each graph to the nearest cluster, the cluster with the closest shape, in the cluster template, and count the number of graphs in each cluster. We characterize writers by the number of a writer’s graphs that are assigned to each cluster. We refer to this as a writer’s cluster fill counts and it serves as writer profile.\nWe can plot the cluster fill counts for each writer in the template training set. First we format the template data to get the cluster fill counts in the proper format for the plotting function.\n\ntemplate_data &lt;- format_template_data(template = template)\nplot_cluster_fill_counts(template_data, facet = TRUE)"
  },
  {
    "objectID": "vignettes/handwriter.html#step-3-fit-a-hierarchical-model",
    "href": "vignettes/handwriter.html#step-3-fit-a-hierarchical-model",
    "title": "analyze-writing",
    "section": "STEP 3: Fit a Hierarchical Model",
    "text": "STEP 3: Fit a Hierarchical Model\nWe will use handwriting samples from each person of interest, calculate the cluster fill counts from each sample using the cluster template, and fit a hierarchical model to estimate each person of interest’s true cluster fill counts.\nSave your known handwriting samples from the persons of interest in main_dir \\&gt; data \\&gt; model_docs as PNG images. The model requires three handwriting samples from each person of interest. Each sample should be at least one paragraph in length. Name the PNG images with a consistent format so that all file names are the same length and the writer ID’s are in the same location. For example, “writer0001_doc1.png”, “writer0001_doc2.png”, “writer0001_doc3.png”, “writer0002_doc1.png”, and so on.\nWe fit a hierarchical model with the function fit_model. This function does the following:\n\nProcesses the model training documents in model_docs, decomposing the handwriting into component graphs. The processed graphs are saved in RDS files in main_dir \\&gt; data \\&gt; model_graphs.\nCalculates the cluster fill counts for each document by assigning each graph to the nearest cluster in the cluster template and counting the number of graphs assigned to each cluster. The cluster assignments are saved in main_dir &gt; data &gt; model_clusters.rds\nFits a hierarchical model to the cluster fill counts using the RJAGS package and draws posterior samples of model parameters with the coda package.\n\nIn this example, we use 4000 MCMC iterations for the model. The inputs writer_indices and doc_indices are the starting and stopping characters in the model training documents file names that contains the writer ID and a document name.\n\nmodel &lt;- fit_model(main_dir = \"path/to/main_dir\", \n                   model_docs = \"path/to/main_dir/data/model_docs\",\n                   num_iters = 4000, \n                   num_chains = 1,\n                   num_cores = 2,\n                   writer_indices = c(7, 10), \n                   doc_indices = c(11, 14))\n\nFor this tutorial, we will use the small example model, example_model, included in handwriter. This model was trained from three documents each from writers 9, 30, 203, 238, and 400 from the CSAFE handwriting database.\n\nmodel &lt;- example_model\n\nWe can plot the cluster fill counts for each person of interest. (NOTE: We had to format the template data to work with the plotting function, but the model data is already in the correct format.)\n\nplot_cluster_fill_counts(formatted_data=model, facet = TRUE)\n\n\n\n\n\n\n\n\nThe bars across the top of each graph show the Writer ID. Each graph has a line for each known handwriting sample from a given writer.\n\nHierarchical Model Variables and Burn-in\nIf you are interested in the variables used by the hierarchical model, continue reading this section. Otherwise, feel free to skip to the next section to learn how to analyze questioned documents.\nWe can list the variables in the model:\n\nnames(as.data.frame(coda::as.mcmc(model$fitted_model[[1]])))\n#&gt;  [1] \"eta[1]\"   \"eta[2]\"   \"eta[3]\"   \"eta[4]\"   \"eta[5]\"   \"gamma[1]\"\n#&gt;  [7] \"gamma[2]\" \"gamma[3]\" \"gamma[4]\" \"gamma[5]\" \"mu[1,1]\"  \"mu[2,1]\" \n#&gt; [13] \"mu[3,1]\"  \"mu[1,2]\"  \"mu[2,2]\"  \"mu[3,2]\"  \"mu[1,3]\"  \"mu[2,3]\" \n#&gt; [19] \"mu[3,3]\"  \"mu[1,4]\"  \"mu[2,4]\"  \"mu[3,4]\"  \"mu[1,5]\"  \"mu[2,5]\" \n#&gt; [25] \"mu[3,5]\"  \"pi[1,1]\"  \"pi[2,1]\"  \"pi[3,1]\"  \"pi[1,2]\"  \"pi[2,2]\" \n#&gt; [31] \"pi[3,2]\"  \"pi[1,3]\"  \"pi[2,3]\"  \"pi[3,3]\"  \"pi[1,4]\"  \"pi[2,4]\" \n#&gt; [37] \"pi[3,4]\"  \"pi[1,5]\"  \"pi[2,5]\"  \"pi[3,5]\"  \"tau[1,1]\" \"tau[2,1]\"\n#&gt; [43] \"tau[3,1]\" \"tau[1,2]\" \"tau[2,2]\" \"tau[3,2]\" \"tau[1,3]\" \"tau[2,3]\"\n#&gt; [49] \"tau[3,3]\" \"tau[1,4]\" \"tau[2,4]\" \"tau[3,4]\" \"tau[1,5]\" \"tau[2,5]\"\n#&gt; [55] \"tau[3,5]\"\n\nView a description of a variable with the about_variable function.\n\nabout_variable(variable = \"mu[1,1]\", model = model)\n#&gt; [1] \"Mu is the location parameter of a wrapped-Cauchy distribution for writer ID w0009 and cluster 1\"\n\nView a trace plot of a variable.\n\nplot_trace(variable = \"mu[1,1]\", model = model)\n\n\n\n\n\n\n\n\nIf we need to, we can drop the beginning MCMC iterations for burn-in. For example, if we want to drop the first 25 iterations, we use\n\nmodel &lt;- drop_burnin(model, burn_in = 25)\n\nIf we want to save the updated model as the current model for this project, replace model.rds in the data folder with\n\nsaveRDS(model, file='data/model.rds')"
  },
  {
    "objectID": "vignettes/handwriter.html#analyze-questioned-documents",
    "href": "vignettes/handwriter.html#analyze-questioned-documents",
    "title": "analyze-writing",
    "section": "Analyze Questioned Documents",
    "text": "Analyze Questioned Documents\nSave your questioned document(s) in main_dir &gt; data &gt; questioned_docs as PNG images. Assign a new writer ID to the questioned documents and name the documents consistently. E.g. “unknown1000_doc1.png”, “unknown1001_doc1.png”, and so on.\nWe estimate the posterior probability of writership for each of the questioned documents with the function analyze_questioned_documents. This function does the following:\n\nProcess Questioned Document(s): Processes the questioned documents in questioned_docs, decomposing the handwriting into component graphs. The processed graphs are saved in RDS files in main_dir \\&gt; data \\&gt; questioned_graphs.\nEstimate the Writer Profile of the Questioned Document(s): Calculates the cluster fill counts for each questioned document by assigning each graph to the nearest cluster in the cluster template and counting the number of graphs assigned to each cluster. The cluster assignments are saved in main_dir \\&gt; data \\&gt; questioned_clusters.rds.\nEstimate the Posterior Probability of Writership: Uses the fitted model from Step 3 to estimate the posterior probability of writership for each questioned document and each person of interest. The results are saved in main_dir \\&gt; data \\&gt; analysis.rds.\n\n\nanalysis &lt;- analyze_questioned_documents(\n  main_dir = \"path/to/main_dir\", \n  questioned_docs = \"path/to/main_dir/questioned_docs\", \n  model = model, \n  writer_indices = c(8,11),\n  doc_indices = c(13,16),\n  num_cores = 2)\n\nLet’s pretend that a handwriting sample from each of the 5 “persons of interest” is a questioned document. These documents are also from the CSAFE handwriting database and have already been analyzed with example_model and the results are included in handwriter as example_analysis.\n\nanalysis &lt;- example_analysis\n\nView the cluster fill counts for each questioned document. Intuitively, the model assesses which writer’s cluster fill counts look the most like the cluster fill counts observed in each questioned document.\n\nplot_cluster_fill_counts(analysis, facet = TRUE)\n\n\n\n\n\n\n\n\nView the posterior probabilities of writership.\n\nanalysis$posterior_probabilities\n#&gt;         known_writer w0030_s03_pWOZ_r01\n#&gt; 1 known_writer_w0009                  0\n#&gt; 2 known_writer_w0030                  1\n#&gt; 3 known_writer_w0238                  0\n\n\nFor Research Only\nIn practice, we would not know who wrote a questioned document, but in research we often perform tests to evaluate models using data where we know the ground truth. Because in this example, we know the true writer of each questioned document, we can measure the accuracy of the model. We define accuracy as the average posterior probability assigned to the true writer. The accuracy of our model is\n\ncalculate_accuracy(analysis)\n#&gt; [1] 1"
  },
  {
    "objectID": "man/plotLine.html",
    "href": "man/plotLine.html",
    "title": "",
    "section": "",
    "text": "This function returns a plot of a single line extracted from a document. It uses the letterList parameter from the processHandwriting function and accepts a single value as whichLetter. Dims requires the dimensions of the entire document, since this isn’t contained in processHandwriting.\n\n\n\nplotLine(letterList, whichLine, dims)\n\n\n\n\n\n\n\nletterList\n\n\nLetter list from processHandwriting function\n\n\n\n\nwhichLine\n\n\nSingle value denoting which line to plot - checked if too big inside function.\n\n\n\n\ndims\n\n\nDimensions of the original document\n\n\n\n\n\n\nggplot plot of single line\n\n\n\n\nlibrary(handwriter)\n\ntwoSent_document = list()\ntwoSent_document$image = twoSent\ntwoSent_document$thin = thinImage(twoSent_document$image)\ntwoSent_processList = processHandwriting(twoSent_document$thin, dim(twoSent_document$image))\n\ndims = dim(twoSent_document$image)\nplotLine(twoSent_processList$letterList, 1, dims)"
  },
  {
    "objectID": "man/plotLine.html#plot-line",
    "href": "man/plotLine.html#plot-line",
    "title": "",
    "section": "",
    "text": "This function returns a plot of a single line extracted from a document. It uses the letterList parameter from the processHandwriting function and accepts a single value as whichLetter. Dims requires the dimensions of the entire document, since this isn’t contained in processHandwriting.\n\n\n\nplotLine(letterList, whichLine, dims)\n\n\n\n\n\n\n\nletterList\n\n\nLetter list from processHandwriting function\n\n\n\n\nwhichLine\n\n\nSingle value denoting which line to plot - checked if too big inside function.\n\n\n\n\ndims\n\n\nDimensions of the original document\n\n\n\n\n\n\nggplot plot of single line\n\n\n\n\nlibrary(handwriter)\n\ntwoSent_document = list()\ntwoSent_document$image = twoSent\ntwoSent_document$thin = thinImage(twoSent_document$image)\ntwoSent_processList = processHandwriting(twoSent_document$thin, dim(twoSent_document$image))\n\ndims = dim(twoSent_document$image)\nplotLine(twoSent_processList$letterList, 1, dims)"
  },
  {
    "objectID": "man/plotImage.html",
    "href": "man/plotImage.html",
    "title": "",
    "section": "",
    "text": "This function plots a basic black and white image.\n\n\n\nplotImage(doc)\n\n\n\n\n\n\n\ndoc\n\n\nA document processed with processDocument() or a binary matrix (all entries are 0 or 1)\n\n\n\n\n\n\nggplot plot\n\n\n\n\nlibrary(handwriter)\n\ncsafe_document &lt;- list()\ncsafe_document$image &lt;- csafe\nplotImage(csafe_document)\n\ndocument &lt;- processDocument('path/to/image.png')\nplotImage(document)"
  },
  {
    "objectID": "man/plotImage.html#plot-image",
    "href": "man/plotImage.html#plot-image",
    "title": "",
    "section": "",
    "text": "This function plots a basic black and white image.\n\n\n\nplotImage(doc)\n\n\n\n\n\n\n\ndoc\n\n\nA document processed with processDocument() or a binary matrix (all entries are 0 or 1)\n\n\n\n\n\n\nggplot plot\n\n\n\n\nlibrary(handwriter)\n\ncsafe_document &lt;- list()\ncsafe_document$image &lt;- csafe\nplotImage(csafe_document)\n\ndocument &lt;- processDocument('path/to/image.png')\nplotImage(document)"
  },
  {
    "objectID": "man/plot_posterior_probabilities.html",
    "href": "man/plot_posterior_probabilities.html",
    "title": "",
    "section": "",
    "text": "Creates a tile plot of posterior probabilities of writership for each questioned document and each known writer analyzed with analyze_questioned_documents().\n\n\n\nplot_posterior_probabilities(analysis)\n\n\n\n\n\n\n\nanalysis\n\n\nA named list of analysis results from analyze_questioned_documents().\n\n\n\n\n\n\nA tile plot of posterior probabilities of writership.\n\n\n\n\nlibrary(handwriter)\n\nplot_posterior_probabilities(analysis = example_analysis)"
  },
  {
    "objectID": "man/plot_posterior_probabilities.html#plot-posterior-probabilities",
    "href": "man/plot_posterior_probabilities.html#plot-posterior-probabilities",
    "title": "",
    "section": "",
    "text": "Creates a tile plot of posterior probabilities of writership for each questioned document and each known writer analyzed with analyze_questioned_documents().\n\n\n\nplot_posterior_probabilities(analysis)\n\n\n\n\n\n\n\nanalysis\n\n\nA named list of analysis results from analyze_questioned_documents().\n\n\n\n\n\n\nA tile plot of posterior probabilities of writership.\n\n\n\n\nlibrary(handwriter)\n\nplot_posterior_probabilities(analysis = example_analysis)"
  },
  {
    "objectID": "man/plotLetter.html",
    "href": "man/plotLetter.html",
    "title": "",
    "section": "",
    "text": "This function returns a plot of a single graph extracted from a document. It uses the letterList parameter from the processHandwriting() or processDocument() function and accepts a single value as whichLetter. Dims requires the dimensions of the entire document, since this isn’t contained in processHandwriting() or processDocument().\n\n\n\nplotLetter(\n  doc,\n  whichLetter,\n  showPaths = TRUE,\n  showCentroid = TRUE,\n  showSlope = TRUE,\n  showNodes = TRUE\n)\n\n\n\n\n\n\n\ndoc\n\n\nA document processed with processHandwriting() or processDocument()\n\n\n\n\nwhichLetter\n\n\nSingle value in 1:length(letterList) denoting which letter to plot.\n\n\n\n\nshowPaths\n\n\nWhether the calculated paths on the letter should be shown with numbers.\n\n\n\n\nshowCentroid\n\n\nWhether the centroid should be shown\n\n\n\n\nshowSlope\n\n\nWhether the slope should be shown\n\n\n\n\nshowNodes\n\n\nWhether the nodes should be shown\n\n\n\n\n\n\nPlot of single letter.\n\n\n\n\nlibrary(handwriter)\n\ntwoSent_document = list()\ntwoSent_document$image = twoSent\ntwoSent_document$thin = thinImage(twoSent_document$image)\ntwoSent_document$process = processHandwriting(twoSent_document$thin, dim(twoSent_document$image))\nplotLetter(twoSent_document, 1)\n\n\n\n\n\n\n\nplotLetter(twoSent_document, 4, showPaths = FALSE)"
  },
  {
    "objectID": "man/plotLetter.html#plot-letter",
    "href": "man/plotLetter.html#plot-letter",
    "title": "",
    "section": "",
    "text": "This function returns a plot of a single graph extracted from a document. It uses the letterList parameter from the processHandwriting() or processDocument() function and accepts a single value as whichLetter. Dims requires the dimensions of the entire document, since this isn’t contained in processHandwriting() or processDocument().\n\n\n\nplotLetter(\n  doc,\n  whichLetter,\n  showPaths = TRUE,\n  showCentroid = TRUE,\n  showSlope = TRUE,\n  showNodes = TRUE\n)\n\n\n\n\n\n\n\ndoc\n\n\nA document processed with processHandwriting() or processDocument()\n\n\n\n\nwhichLetter\n\n\nSingle value in 1:length(letterList) denoting which letter to plot.\n\n\n\n\nshowPaths\n\n\nWhether the calculated paths on the letter should be shown with numbers.\n\n\n\n\nshowCentroid\n\n\nWhether the centroid should be shown\n\n\n\n\nshowSlope\n\n\nWhether the slope should be shown\n\n\n\n\nshowNodes\n\n\nWhether the nodes should be shown\n\n\n\n\n\n\nPlot of single letter.\n\n\n\n\nlibrary(handwriter)\n\ntwoSent_document = list()\ntwoSent_document$image = twoSent\ntwoSent_document$thin = thinImage(twoSent_document$image)\ntwoSent_document$process = processHandwriting(twoSent_document$thin, dim(twoSent_document$image))\nplotLetter(twoSent_document, 1)\n\n\n\n\n\n\n\nplotLetter(twoSent_document, 4, showPaths = FALSE)"
  },
  {
    "objectID": "man/process_batch_dir.html",
    "href": "man/process_batch_dir.html",
    "title": "",
    "section": "",
    "text": "Process a list of handwriting samples saved as PNG images in a directory: (1) Load the image and convert it to black and white with readPNGBinary() (2) Thin the handwriting to one pixel in width with thinImage() (3) Run processHandwriting() to split the handwriting into parts called edges and place nodes at the ends of edges. Then combine edges into component shapes called graphs. (4) Save the processed document in an RDS file. (5) Optional. Return a list of the processed documents.\n\n\n\nprocess_batch_dir(input_dir, output_dir = \".\", skip_docs_on_retry = TRUE)\n\n\n\n\n\n\n\ninput_dir\n\n\nInput directory that contains images\n\n\n\n\noutput_dir\n\n\nA directory to save the processed images\n\n\n\n\nskip_docs_on_retry\n\n\nLogical whether to skip documents in input_dir that caused errors on a previous run. The errors and document names are stored in output_dir &gt; problems.txt. If this is the first run, process_batch_list will attempt to process all documents in input_dir.\n\n\n\n\n\n\nNo return value, called for side effects\n\n\n\n\nlibrary(handwriter)\n\nprocess_batch_dir(\"path/to/input_dir\", \"path/to/output_dir\")"
  },
  {
    "objectID": "man/process_batch_dir.html#process-batch-directory",
    "href": "man/process_batch_dir.html#process-batch-directory",
    "title": "",
    "section": "",
    "text": "Process a list of handwriting samples saved as PNG images in a directory: (1) Load the image and convert it to black and white with readPNGBinary() (2) Thin the handwriting to one pixel in width with thinImage() (3) Run processHandwriting() to split the handwriting into parts called edges and place nodes at the ends of edges. Then combine edges into component shapes called graphs. (4) Save the processed document in an RDS file. (5) Optional. Return a list of the processed documents.\n\n\n\nprocess_batch_dir(input_dir, output_dir = \".\", skip_docs_on_retry = TRUE)\n\n\n\n\n\n\n\ninput_dir\n\n\nInput directory that contains images\n\n\n\n\noutput_dir\n\n\nA directory to save the processed images\n\n\n\n\nskip_docs_on_retry\n\n\nLogical whether to skip documents in input_dir that caused errors on a previous run. The errors and document names are stored in output_dir &gt; problems.txt. If this is the first run, process_batch_list will attempt to process all documents in input_dir.\n\n\n\n\n\n\nNo return value, called for side effects\n\n\n\n\nlibrary(handwriter)\n\nprocess_batch_dir(\"path/to/input_dir\", \"path/to/output_dir\")"
  },
  {
    "objectID": "man/get_posterior_probabilities.html",
    "href": "man/get_posterior_probabilities.html",
    "title": "",
    "section": "",
    "text": "Get the posterior probabilities for questioned document analyzed with analyze_questioned_documents().\n\n\n\nget_posterior_probabilities(analysis, questioned_doc)\n\n\n\n\n\n\n\nanalysis\n\n\nThe output of analyze_questioned_documents(). If more than one questioned document was analyzed with this function, then the data frame analysis$posterior_probabilities lists the posterior probabilities for all questioned documents. get_posterior_probabilities() creates a data frame of the posterior probabilities for a single questioned document and sorts the known writers from the most likely to least likely to have written the questioned document.\n\n\n\n\nquestioned_doc\n\n\nThe filename of the questioned document\n\n\n\n\n\n\nA data frame of posterior probabilities for the questioned document\n\n\n\n\nlibrary(handwriter)\n\nget_posterior_probabilities(\n  analysis = example_analysis,\n  questioned_doc = \"w0030_s03_pWOZ_r01\"\n)\n\n        known_writer w0030_s03_pWOZ_r01\n2 known_writer_w0030                  1\n1 known_writer_w0009                  0\n3 known_writer_w0238                  0"
  },
  {
    "objectID": "man/get_posterior_probabilities.html#get-posterior-probabilities",
    "href": "man/get_posterior_probabilities.html#get-posterior-probabilities",
    "title": "",
    "section": "",
    "text": "Get the posterior probabilities for questioned document analyzed with analyze_questioned_documents().\n\n\n\nget_posterior_probabilities(analysis, questioned_doc)\n\n\n\n\n\n\n\nanalysis\n\n\nThe output of analyze_questioned_documents(). If more than one questioned document was analyzed with this function, then the data frame analysis$posterior_probabilities lists the posterior probabilities for all questioned documents. get_posterior_probabilities() creates a data frame of the posterior probabilities for a single questioned document and sorts the known writers from the most likely to least likely to have written the questioned document.\n\n\n\n\nquestioned_doc\n\n\nThe filename of the questioned document\n\n\n\n\n\n\nA data frame of posterior probabilities for the questioned document\n\n\n\n\nlibrary(handwriter)\n\nget_posterior_probabilities(\n  analysis = example_analysis,\n  questioned_doc = \"w0030_s03_pWOZ_r01\"\n)\n\n        known_writer w0030_s03_pWOZ_r01\n2 known_writer_w0030                  1\n1 known_writer_w0009                  0\n3 known_writer_w0238                  0"
  },
  {
    "objectID": "man/extractGraphs.html",
    "href": "man/extractGraphs.html",
    "title": "",
    "section": "",
    "text": "‘r lifecycle::badge(\"superseded\")’\n\n\n\nextractGraphs(source_folder = getwd(), save_folder = getwd())\n\n\n\n\n\n\n\nsource_folder\n\n\npath to folder containing .png images\n\n\n\n\nsave_folder\n\n\npath to folder where graphs are saved to\n\n\n\n\n\n\nDevelopment on ‘extractGraphs()’ is complete. We recommend using ‘process_batch_dir()’ instead.\nExtracts graphs from .png images and saves each by their respective writer.\n\n\n\nsaves graphs in an rds file\n\n\n\n\nlibrary(handwriter)\n\nsof = \"path to folder containing .png images\"\nsaf = \"path to folder where graphs will be saved to\"\nextractGraphs(sof, saf)"
  },
  {
    "objectID": "man/extractGraphs.html#extract-graphs",
    "href": "man/extractGraphs.html#extract-graphs",
    "title": "",
    "section": "",
    "text": "‘r lifecycle::badge(\"superseded\")’\n\n\n\nextractGraphs(source_folder = getwd(), save_folder = getwd())\n\n\n\n\n\n\n\nsource_folder\n\n\npath to folder containing .png images\n\n\n\n\nsave_folder\n\n\npath to folder where graphs are saved to\n\n\n\n\n\n\nDevelopment on ‘extractGraphs()’ is complete. We recommend using ‘process_batch_dir()’ instead.\nExtracts graphs from .png images and saves each by their respective writer.\n\n\n\nsaves graphs in an rds file\n\n\n\n\nlibrary(handwriter)\n\nsof = \"path to folder containing .png images\"\nsaf = \"path to folder where graphs will be saved to\"\nextractGraphs(sof, saf)"
  },
  {
    "objectID": "man/get_cluster_fill_counts.html",
    "href": "man/get_cluster_fill_counts.html",
    "title": "",
    "section": "",
    "text": "get_cluster_fill_counts() creates a data frame that shows the number of graphs in each cluster for each input document.\n\n\n\nget_cluster_fill_counts(df)\n\n\n\n\n\n\n\ndf\n\n\nA data frame with columns writer, doc, and cluster. Each row corresponding to a graph and lists the writer of that graph, the document from which the graph was obtained, and the cluster to which that graph is assigned.\n\n\n\n\n\n\nA dataframe of cluster fill counts for each document in the input data frame.\n\n\n\n\nlibrary(handwriter)\n\nwriter &lt;- c(rep(1, 20), rep(2, 20), rep(3, 20))\ndocname &lt;- c(rep('doc1',20), rep('doc2', 20), rep('doc3', 20))\ndoc &lt;- c(rep(1, 20), rep(2, 20), rep(3, 20))\ncluster &lt;- sample(3, 60, replace=TRUE)\ndf &lt;- data.frame(docname, writer, doc, cluster)\nget_cluster_fill_counts(df)\n\n# A tibble: 3 × 6\n# Groups:   docname, writer, doc [3]\n  docname writer   doc   `1`   `2`   `3`\n  &lt;chr&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1 doc1         1     1     6     5     9\n2 doc2         2     2     4     6    10\n3 doc3         3     3     7     5     8"
  },
  {
    "objectID": "man/get_cluster_fill_counts.html#get_cluster_fill_counts",
    "href": "man/get_cluster_fill_counts.html#get_cluster_fill_counts",
    "title": "",
    "section": "",
    "text": "get_cluster_fill_counts() creates a data frame that shows the number of graphs in each cluster for each input document.\n\n\n\nget_cluster_fill_counts(df)\n\n\n\n\n\n\n\ndf\n\n\nA data frame with columns writer, doc, and cluster. Each row corresponding to a graph and lists the writer of that graph, the document from which the graph was obtained, and the cluster to which that graph is assigned.\n\n\n\n\n\n\nA dataframe of cluster fill counts for each document in the input data frame.\n\n\n\n\nlibrary(handwriter)\n\nwriter &lt;- c(rep(1, 20), rep(2, 20), rep(3, 20))\ndocname &lt;- c(rep('doc1',20), rep('doc2', 20), rep('doc3', 20))\ndoc &lt;- c(rep(1, 20), rep(2, 20), rep(3, 20))\ncluster &lt;- sample(3, 60, replace=TRUE)\ndf &lt;- data.frame(docname, writer, doc, cluster)\nget_cluster_fill_counts(df)\n\n# A tibble: 3 × 6\n# Groups:   docname, writer, doc [3]\n  docname writer   doc   `1`   `2`   `3`\n  &lt;chr&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1 doc1         1     1     6     5     9\n2 doc2         2     2     4     6    10\n3 doc3         3     3     7     5     8"
  },
  {
    "objectID": "man/readPNGBinary.html",
    "href": "man/readPNGBinary.html",
    "title": "",
    "section": "",
    "text": "This function reads in and binarizes a PNG image.\n\n\n\nreadPNGBinary(\n  path,\n  cutoffAdjust = 0,\n  clean = TRUE,\n  crop = TRUE,\n  inversion = FALSE\n)\n\n\n\n\n\n\n\npath\n\n\nFile path for image.\n\n\n\n\ncutoffAdjust\n\n\nMultiplicative adjustment to the K-means estimated binarization cutoff.\n\n\n\n\nclean\n\n\nWhether to fill in white pixels with 7 or 8 neighbors. This will help a lot when thinning – keeps from getting little white bubbles in text.\n\n\n\n\ncrop\n\n\nLogical value dictating whether or not to crop the white out around the image. TRUE by default.\n\n\n\n\ninversion\n\n\nLogical value dictating whether or not to flip each pixel of binarized image. Flipping happens after binarization. FALSE by default.\n\n\n\n\n\n\nReturns image from path. 0 represents black, and 1 represents white by default.\n\n\n\n\nlibrary(handwriter)\n\nimage_path &lt;- system.file(\"extdata\", \"phrase_example.png\", package = \"handwriter\")\ncsafe_document &lt;- list()\ncsafe_document$image = readPNGBinary(image_path)\nplotImage(csafe_document)"
  },
  {
    "objectID": "man/readPNGBinary.html#read-png-binary",
    "href": "man/readPNGBinary.html#read-png-binary",
    "title": "",
    "section": "",
    "text": "This function reads in and binarizes a PNG image.\n\n\n\nreadPNGBinary(\n  path,\n  cutoffAdjust = 0,\n  clean = TRUE,\n  crop = TRUE,\n  inversion = FALSE\n)\n\n\n\n\n\n\n\npath\n\n\nFile path for image.\n\n\n\n\ncutoffAdjust\n\n\nMultiplicative adjustment to the K-means estimated binarization cutoff.\n\n\n\n\nclean\n\n\nWhether to fill in white pixels with 7 or 8 neighbors. This will help a lot when thinning – keeps from getting little white bubbles in text.\n\n\n\n\ncrop\n\n\nLogical value dictating whether or not to crop the white out around the image. TRUE by default.\n\n\n\n\ninversion\n\n\nLogical value dictating whether or not to flip each pixel of binarized image. Flipping happens after binarization. FALSE by default.\n\n\n\n\n\n\nReturns image from path. 0 represents black, and 1 represents white by default.\n\n\n\n\nlibrary(handwriter)\n\nimage_path &lt;- system.file(\"extdata\", \"phrase_example.png\", package = \"handwriter\")\ncsafe_document &lt;- list()\ncsafe_document$image = readPNGBinary(image_path)\nplotImage(csafe_document)"
  },
  {
    "objectID": "man/plot_cluster_fill_rates.html",
    "href": "man/plot_cluster_fill_rates.html",
    "title": "",
    "section": "",
    "text": "Plot the cluster fill rates for each document in formatted_data.\n\n\n\nplot_cluster_fill_rates(formatted_data, facet = FALSE)\n\n\n\n\n\n\n\nformatted_data\n\n\nData created by format_template_data(), fit_model(), or analyze_questioned_documents()\n\n\n\n\nfacet\n\n\nTRUE uses facet_wrap to create a subplot for each writer. FALSE plots the data on a single plot.\n\n\n\n\n\n\nggplot plot of cluster fill rates\n\n\n\n\nlibrary(handwriter)\n\n# Plot cluster fill rates for template training documents\ntemplate_data &lt;- format_template_data(example_cluster_template)\nplot_cluster_fill_rates(formatted_data = template_data, facet = TRUE)\n\n\n\n\n\n\n\n# Plot cluster fill rates for model training documents\nplot_cluster_fill_rates(formatted_data = example_model, facet = TRUE)\n\n\n\n\n\n\n\n# Plot cluster fill rates for questioned documents\nplot_cluster_fill_rates(formatted_data = example_analysis, facet = FALSE)"
  },
  {
    "objectID": "man/plot_cluster_fill_rates.html#plot-cluster-fill-rates",
    "href": "man/plot_cluster_fill_rates.html#plot-cluster-fill-rates",
    "title": "",
    "section": "",
    "text": "Plot the cluster fill rates for each document in formatted_data.\n\n\n\nplot_cluster_fill_rates(formatted_data, facet = FALSE)\n\n\n\n\n\n\n\nformatted_data\n\n\nData created by format_template_data(), fit_model(), or analyze_questioned_documents()\n\n\n\n\nfacet\n\n\nTRUE uses facet_wrap to create a subplot for each writer. FALSE plots the data on a single plot.\n\n\n\n\n\n\nggplot plot of cluster fill rates\n\n\n\n\nlibrary(handwriter)\n\n# Plot cluster fill rates for template training documents\ntemplate_data &lt;- format_template_data(example_cluster_template)\nplot_cluster_fill_rates(formatted_data = template_data, facet = TRUE)\n\n\n\n\n\n\n\n# Plot cluster fill rates for model training documents\nplot_cluster_fill_rates(formatted_data = example_model, facet = TRUE)\n\n\n\n\n\n\n\n# Plot cluster fill rates for questioned documents\nplot_cluster_fill_rates(formatted_data = example_analysis, facet = FALSE)"
  },
  {
    "objectID": "man/cleanBinaryImage.html",
    "href": "man/cleanBinaryImage.html",
    "title": "",
    "section": "",
    "text": "Removes alpha channel from png image.\n\n\n\ncleanBinaryImage(img)\n\n\n\n\n\n\n\nimg\n\n\nA matrix of 1s and 0s.\n\n\n\n\n\n\npng image with the alpha channel removed"
  },
  {
    "objectID": "man/cleanBinaryImage.html#cleanbinaryimage",
    "href": "man/cleanBinaryImage.html#cleanbinaryimage",
    "title": "",
    "section": "",
    "text": "Removes alpha channel from png image.\n\n\n\ncleanBinaryImage(img)\n\n\n\n\n\n\n\nimg\n\n\nA matrix of 1s and 0s.\n\n\n\n\n\n\npng image with the alpha channel removed"
  },
  {
    "objectID": "man/csafe.html",
    "href": "man/csafe.html",
    "title": "",
    "section": "",
    "text": "Cursive written word: csafe\n\n\n\ncsafe\n\n\n\n\nBinary image matrix. 111 rows and 410 columns.\n\n\n\n\nlibrary(handwriter)\n\ncsafe_document &lt;- list()\ncsafe_document$image &lt;- csafe\nplotImage(csafe_document)\n\n\n\n\n\n\n\ncsafe_document$thin &lt;- thinImage(csafe_document$image)\nplotImageThinned(csafe_document)\n\n\n\n\n\n\n\ncsafe_processList &lt;- processHandwriting(csafe_document$thin, dim(csafe_document$image))"
  },
  {
    "objectID": "man/csafe.html#cursive-written-word-csafe",
    "href": "man/csafe.html#cursive-written-word-csafe",
    "title": "",
    "section": "",
    "text": "Cursive written word: csafe\n\n\n\ncsafe\n\n\n\n\nBinary image matrix. 111 rows and 410 columns.\n\n\n\n\nlibrary(handwriter)\n\ncsafe_document &lt;- list()\ncsafe_document$image &lt;- csafe\nplotImage(csafe_document)\n\n\n\n\n\n\n\ncsafe_document$thin &lt;- thinImage(csafe_document$image)\nplotImageThinned(csafe_document)\n\n\n\n\n\n\n\ncsafe_processList &lt;- processHandwriting(csafe_document$thin, dim(csafe_document$image))"
  },
  {
    "objectID": "man/plot_credible_intervals.html",
    "href": "man/plot_credible_intervals.html",
    "title": "",
    "section": "",
    "text": "Plot credible intervals for the model’s pi parameters that estimate the true writer cluster fill counts.\n\n\n\nplot_credible_intervals(\n  model,\n  interval_min = 0.025,\n  interval_max = 0.975,\n  facet = FALSE\n)\n\n\n\n\n\n\n\nmodel\n\n\nA model created by fit_model()\n\n\n\n\ninterval_min\n\n\nThe lower bound of the credible interval. It must be greater than zero and less than 1.\n\n\n\n\ninterval_max\n\n\nThe upper bound of the credible interval. It must be greater than the interval minimum and less than 1.\n\n\n\n\nfacet\n\n\nTRUE uses facet_wrap to create a subplot for each writer. FALSE plots the data on a single plot.\n\n\n\n\n\n\nggplot plot credible intervals\n\n\n\n\nlibrary(handwriter)\n\nplot_credible_intervals(model = example_model)\n\n\n\n\n\n\n\nplot_credible_intervals(model = example_model, facet = TRUE)"
  },
  {
    "objectID": "man/plot_credible_intervals.html#plot-credible-intervals",
    "href": "man/plot_credible_intervals.html#plot-credible-intervals",
    "title": "",
    "section": "",
    "text": "Plot credible intervals for the model’s pi parameters that estimate the true writer cluster fill counts.\n\n\n\nplot_credible_intervals(\n  model,\n  interval_min = 0.025,\n  interval_max = 0.975,\n  facet = FALSE\n)\n\n\n\n\n\n\n\nmodel\n\n\nA model created by fit_model()\n\n\n\n\ninterval_min\n\n\nThe lower bound of the credible interval. It must be greater than zero and less than 1.\n\n\n\n\ninterval_max\n\n\nThe upper bound of the credible interval. It must be greater than the interval minimum and less than 1.\n\n\n\n\nfacet\n\n\nTRUE uses facet_wrap to create a subplot for each writer. FALSE plots the data on a single plot.\n\n\n\n\n\n\nggplot plot credible intervals\n\n\n\n\nlibrary(handwriter)\n\nplot_credible_intervals(model = example_model)\n\n\n\n\n\n\n\nplot_credible_intervals(model = example_model, facet = TRUE)"
  },
  {
    "objectID": "man/london.html",
    "href": "man/london.html",
    "title": "",
    "section": "",
    "text": "Cursive written word: London\n\n\n\nlondon\n\n\n\n\nBinary image matrix. 148 rows and 481 columns.\n\n\n\n\nlibrary(handwriter)\n\nlondon_document &lt;- list()\nlondon_document$image &lt;- london\nplotImage(london_document)\n\n\n\n\n\n\n\nlondon_document$thin &lt;- thinImage(london_document$image)\nplotImageThinned(london_document)\n\n\n\n\n\n\n\nlondon_processList &lt;- processHandwriting(london_document$thin, dim(london_document$image))"
  },
  {
    "objectID": "man/london.html#cursive-written-word-london",
    "href": "man/london.html#cursive-written-word-london",
    "title": "",
    "section": "",
    "text": "Cursive written word: London\n\n\n\nlondon\n\n\n\n\nBinary image matrix. 148 rows and 481 columns.\n\n\n\n\nlibrary(handwriter)\n\nlondon_document &lt;- list()\nlondon_document$image &lt;- london\nplotImage(london_document)\n\n\n\n\n\n\n\nlondon_document$thin &lt;- thinImage(london_document$image)\nplotImageThinned(london_document)\n\n\n\n\n\n\n\nlondon_processList &lt;- processHandwriting(london_document$thin, dim(london_document$image))"
  },
  {
    "objectID": "man/make_clustering_template.html",
    "href": "man/make_clustering_template.html",
    "title": "",
    "section": "",
    "text": "make_clustering_template() applies a K-means clustering algorithm to the input handwriting samples pre-processed with process_batch_dir() and saved in the input folder main_dir &gt; data &gt; template_graphs. The K-means algorithm sorts the graphs in the input handwriting samples into groups, or clusters, of similar graphs.\n\n\n\nmake_clustering_template(\n  main_dir,\n  template_docs,\n  writer_indices,\n  centers_seed,\n  K = 40,\n  num_dist_cores = 1,\n  max_iters = 25\n)\n\n\n\n\n\n\n\nmain_dir\n\n\nMain directory that will store template files\n\n\n\n\ntemplate_docs\n\n\nA directory containing template training images\n\n\n\n\nwriter_indices\n\n\nA vector of the starting and ending location of the writer ID in the file name.\n\n\n\n\ncenters_seed\n\n\nInteger seed for the random number generator when selecting starting cluster centers.\n\n\n\n\nK\n\n\nInteger number of clusters\n\n\n\n\nnum_dist_cores\n\n\nInteger number of cores to use for the distance calculations in the K-means algorithm. Each iteration of the K-means algorithm calculates the distance between each input graph and each cluster center.\n\n\n\n\nmax_iters\n\n\nMaximum number of iterations to allow the K-means algorithm to run\n\n\n\n\n\n\nList containing the cluster template\n\n\n\n\nlibrary(handwriter)\n\nmain_dir &lt;- \"path/to/folder\"\ntemplate_docs &lt;- \"path/to/template_training_docs\"\ntemplate_list &lt;- make_clustering_template(\n  main_dir = main_dir,\n  template_docs = template_docs,\n  writer_indices = c(2, 5),\n  K = 10,\n  num_dist_cores = 2,\n  max_iters = 25,\n  centers_seed = 100,\n)"
  },
  {
    "objectID": "man/make_clustering_template.html#make-clustering-template",
    "href": "man/make_clustering_template.html#make-clustering-template",
    "title": "",
    "section": "",
    "text": "make_clustering_template() applies a K-means clustering algorithm to the input handwriting samples pre-processed with process_batch_dir() and saved in the input folder main_dir &gt; data &gt; template_graphs. The K-means algorithm sorts the graphs in the input handwriting samples into groups, or clusters, of similar graphs.\n\n\n\nmake_clustering_template(\n  main_dir,\n  template_docs,\n  writer_indices,\n  centers_seed,\n  K = 40,\n  num_dist_cores = 1,\n  max_iters = 25\n)\n\n\n\n\n\n\n\nmain_dir\n\n\nMain directory that will store template files\n\n\n\n\ntemplate_docs\n\n\nA directory containing template training images\n\n\n\n\nwriter_indices\n\n\nA vector of the starting and ending location of the writer ID in the file name.\n\n\n\n\ncenters_seed\n\n\nInteger seed for the random number generator when selecting starting cluster centers.\n\n\n\n\nK\n\n\nInteger number of clusters\n\n\n\n\nnum_dist_cores\n\n\nInteger number of cores to use for the distance calculations in the K-means algorithm. Each iteration of the K-means algorithm calculates the distance between each input graph and each cluster center.\n\n\n\n\nmax_iters\n\n\nMaximum number of iterations to allow the K-means algorithm to run\n\n\n\n\n\n\nList containing the cluster template\n\n\n\n\nlibrary(handwriter)\n\nmain_dir &lt;- \"path/to/folder\"\ntemplate_docs &lt;- \"path/to/template_training_docs\"\ntemplate_list &lt;- make_clustering_template(\n  main_dir = main_dir,\n  template_docs = template_docs,\n  writer_indices = c(2, 5),\n  K = 10,\n  num_dist_cores = 2,\n  max_iters = 25,\n  centers_seed = 100,\n)"
  },
  {
    "objectID": "man/format_template_data.html",
    "href": "man/format_template_data.html",
    "title": "",
    "section": "",
    "text": "format_template_data() formats the template data for use with plot_cluster_fill_counts(). The output is a list that contains a data frame called cluster_fill_counts.\n\n\n\nformat_template_data(template)\n\n\n\n\n\n\n\ntemplate\n\n\nA single cluster template created by make_clustering_template()\n\n\n\n\n\n\nList that contains the cluster fill counts\n\n\n\n\nlibrary(handwriter)\n\ntemplate_data &lt;- format_template_data(template = example_cluster_template)\nplot_cluster_fill_counts(formatted_data = template_data, facet = TRUE)"
  },
  {
    "objectID": "man/format_template_data.html#format-template-data",
    "href": "man/format_template_data.html#format-template-data",
    "title": "",
    "section": "",
    "text": "format_template_data() formats the template data for use with plot_cluster_fill_counts(). The output is a list that contains a data frame called cluster_fill_counts.\n\n\n\nformat_template_data(template)\n\n\n\n\n\n\n\ntemplate\n\n\nA single cluster template created by make_clustering_template()\n\n\n\n\n\n\nList that contains the cluster fill counts\n\n\n\n\nlibrary(handwriter)\n\ntemplate_data &lt;- format_template_data(template = example_cluster_template)\nplot_cluster_fill_counts(formatted_data = template_data, facet = TRUE)"
  },
  {
    "objectID": "man/processDocument.html",
    "href": "man/processDocument.html",
    "title": "",
    "section": "",
    "text": "Load a handwriting sample from a PNG image. Then binarize, thin, and split the handwriting into graphs.\n\n\n\nprocessDocument(path)\n\n\n\n\n\n\n\npath\n\n\nFile path for handwriting document. The document must be in PNG file format.\n\n\n\n\n\n\nThe processed document as a list\n\n\n\n\nlibrary(handwriter)\n\nimage_path &lt;- system.file(\"extdata\", \"phrase_example.png\", package = \"handwriter\")\ndoc &lt;- processDocument(image_path)\nplotImage(doc)\n\n\n\n\n\n\n\nplotImageThinned(doc)\n\n\n\n\n\n\n\nplotNodes(doc)"
  },
  {
    "objectID": "man/processDocument.html#process-document",
    "href": "man/processDocument.html#process-document",
    "title": "",
    "section": "",
    "text": "Load a handwriting sample from a PNG image. Then binarize, thin, and split the handwriting into graphs.\n\n\n\nprocessDocument(path)\n\n\n\n\n\n\n\npath\n\n\nFile path for handwriting document. The document must be in PNG file format.\n\n\n\n\n\n\nThe processed document as a list\n\n\n\n\nlibrary(handwriter)\n\nimage_path &lt;- system.file(\"extdata\", \"phrase_example.png\", package = \"handwriter\")\ndoc &lt;- processDocument(image_path)\nplotImage(doc)\n\n\n\n\n\n\n\nplotImageThinned(doc)\n\n\n\n\n\n\n\nplotNodes(doc)"
  },
  {
    "objectID": "man/get_credible_intervals.html",
    "href": "man/get_credible_intervals.html",
    "title": "",
    "section": "",
    "text": "In a model created with fit_model() the pi parameters are the estimate of the true cluster fill count for a particular writer and cluster. The function get_credible_intervals() calculates the credible intervals of the pi parameters for each writer in the model.\n\n\n\nget_credible_intervals(model, interval_min = 0.05, interval_max = 0.95)\n\n\n\n\n\n\n\nmodel\n\n\nA model output by fit_model()\n\n\n\n\ninterval_min\n\n\nThe lower bound for the credible interval. The number must be between 0 and 1.\n\n\n\n\ninterval_max\n\n\nThe upper bound for the credible interval. The number must be greater than interval_min and must be less than 1.\n\n\n\n\n\n\nA list of data frames. Each data frame lists the credible intervals for a single writer.\n\n\n\n\nlibrary(handwriter)\n\nget_credible_intervals(model=example_model)\n\n[[1]]\n  quantile  cluster_1  cluster_2 cluster_3 cluster_4 cluster_5 writer\n1       5% 0.06042425 0.02493705 0.1418073 0.5529695 0.1306786  w0009\n2      50% 0.07366519 0.03478669 0.1647020 0.5782510 0.1489102  w0009\n3      95% 0.08875836 0.04671823 0.1840218 0.6088443 0.1701284  w0009\n\n[[2]]\n  quantile   cluster_1    cluster_2 cluster_3 cluster_4 cluster_5 writer\n1       5% 0.008342953 5.982238e-05 0.2480043 0.4153643 0.2096460  w0030\n2      50% 0.017026968 1.492831e-03 0.2840930 0.4549356 0.2402698  w0030\n3      95% 0.029416108 8.076710e-03 0.3161589 0.4931652 0.2830293  w0030\n\n[[3]]\n  quantile  cluster_1  cluster_2  cluster_3 cluster_4  cluster_5 writer\n1       5% 0.02039637 0.01621031 0.08938908 0.7044609 0.08201707  w0238\n2      50% 0.02877164 0.02494265 0.10993121 0.7323968 0.10357189  w0238\n3      95% 0.04086654 0.03510818 0.12997545 0.7596250 0.12387242  w0238\n\nget_credible_intervals(model=example_model, interval_min=0.05, interval_max=0.95)\n\n[[1]]\n  quantile  cluster_1  cluster_2 cluster_3 cluster_4 cluster_5 writer\n1       5% 0.06042425 0.02493705 0.1418073 0.5529695 0.1306786  w0009\n2      50% 0.07366519 0.03478669 0.1647020 0.5782510 0.1489102  w0009\n3      95% 0.08875836 0.04671823 0.1840218 0.6088443 0.1701284  w0009\n\n[[2]]\n  quantile   cluster_1    cluster_2 cluster_3 cluster_4 cluster_5 writer\n1       5% 0.008342953 5.982238e-05 0.2480043 0.4153643 0.2096460  w0030\n2      50% 0.017026968 1.492831e-03 0.2840930 0.4549356 0.2402698  w0030\n3      95% 0.029416108 8.076710e-03 0.3161589 0.4931652 0.2830293  w0030\n\n[[3]]\n  quantile  cluster_1  cluster_2  cluster_3 cluster_4  cluster_5 writer\n1       5% 0.02039637 0.01621031 0.08938908 0.7044609 0.08201707  w0238\n2      50% 0.02877164 0.02494265 0.10993121 0.7323968 0.10357189  w0238\n3      95% 0.04086654 0.03510818 0.12997545 0.7596250 0.12387242  w0238"
  },
  {
    "objectID": "man/get_credible_intervals.html#get-credible-intervals",
    "href": "man/get_credible_intervals.html#get-credible-intervals",
    "title": "",
    "section": "",
    "text": "In a model created with fit_model() the pi parameters are the estimate of the true cluster fill count for a particular writer and cluster. The function get_credible_intervals() calculates the credible intervals of the pi parameters for each writer in the model.\n\n\n\nget_credible_intervals(model, interval_min = 0.05, interval_max = 0.95)\n\n\n\n\n\n\n\nmodel\n\n\nA model output by fit_model()\n\n\n\n\ninterval_min\n\n\nThe lower bound for the credible interval. The number must be between 0 and 1.\n\n\n\n\ninterval_max\n\n\nThe upper bound for the credible interval. The number must be greater than interval_min and must be less than 1.\n\n\n\n\n\n\nA list of data frames. Each data frame lists the credible intervals for a single writer.\n\n\n\n\nlibrary(handwriter)\n\nget_credible_intervals(model=example_model)\n\n[[1]]\n  quantile  cluster_1  cluster_2 cluster_3 cluster_4 cluster_5 writer\n1       5% 0.06042425 0.02493705 0.1418073 0.5529695 0.1306786  w0009\n2      50% 0.07366519 0.03478669 0.1647020 0.5782510 0.1489102  w0009\n3      95% 0.08875836 0.04671823 0.1840218 0.6088443 0.1701284  w0009\n\n[[2]]\n  quantile   cluster_1    cluster_2 cluster_3 cluster_4 cluster_5 writer\n1       5% 0.008342953 5.982238e-05 0.2480043 0.4153643 0.2096460  w0030\n2      50% 0.017026968 1.492831e-03 0.2840930 0.4549356 0.2402698  w0030\n3      95% 0.029416108 8.076710e-03 0.3161589 0.4931652 0.2830293  w0030\n\n[[3]]\n  quantile  cluster_1  cluster_2  cluster_3 cluster_4  cluster_5 writer\n1       5% 0.02039637 0.01621031 0.08938908 0.7044609 0.08201707  w0238\n2      50% 0.02877164 0.02494265 0.10993121 0.7323968 0.10357189  w0238\n3      95% 0.04086654 0.03510818 0.12997545 0.7596250 0.12387242  w0238\n\nget_credible_intervals(model=example_model, interval_min=0.05, interval_max=0.95)\n\n[[1]]\n  quantile  cluster_1  cluster_2 cluster_3 cluster_4 cluster_5 writer\n1       5% 0.06042425 0.02493705 0.1418073 0.5529695 0.1306786  w0009\n2      50% 0.07366519 0.03478669 0.1647020 0.5782510 0.1489102  w0009\n3      95% 0.08875836 0.04671823 0.1840218 0.6088443 0.1701284  w0009\n\n[[2]]\n  quantile   cluster_1    cluster_2 cluster_3 cluster_4 cluster_5 writer\n1       5% 0.008342953 5.982238e-05 0.2480043 0.4153643 0.2096460  w0030\n2      50% 0.017026968 1.492831e-03 0.2840930 0.4549356 0.2402698  w0030\n3      95% 0.029416108 8.076710e-03 0.3161589 0.4931652 0.2830293  w0030\n\n[[3]]\n  quantile  cluster_1  cluster_2  cluster_3 cluster_4  cluster_5 writer\n1       5% 0.02039637 0.01621031 0.08938908 0.7044609 0.08201707  w0238\n2      50% 0.02877164 0.02494265 0.10993121 0.7323968 0.10357189  w0238\n3      95% 0.04086654 0.03510818 0.12997545 0.7596250 0.12387242  w0238"
  },
  {
    "objectID": "man/thinImage.html",
    "href": "man/thinImage.html",
    "title": "",
    "section": "",
    "text": "This function returns a vector of locations for black pixels in the thinned image. Thinning done using Zhang - Suen algorithm.\n\n\n\nthinImage(img)\n\n\n\n\n\n\n\nimg\n\n\nA binary matrix of the text that is to be thinned.\n\n\n\n\n\n\nA thinned, one pixel wide, image."
  },
  {
    "objectID": "man/thinImage.html#thinimage",
    "href": "man/thinImage.html#thinimage",
    "title": "",
    "section": "",
    "text": "This function returns a vector of locations for black pixels in the thinned image. Thinning done using Zhang - Suen algorithm.\n\n\n\nthinImage(img)\n\n\n\n\n\n\n\nimg\n\n\nA binary matrix of the text that is to be thinned.\n\n\n\n\n\n\nA thinned, one pixel wide, image."
  },
  {
    "objectID": "man/twoSent.html",
    "href": "man/twoSent.html",
    "title": "",
    "section": "",
    "text": "Two sentence printed example handwriting\n\n\n\ntwoSent\n\n\n\n\nBinary image matrix. 396 rows and 1947 columns\n\n\n\n\nlibrary(handwriter)\n\ntwoSent_document &lt;- list()\ntwoSent_document$image &lt;- twoSent\nplotImage(twoSent_document)\n\ntwoSent_document &lt;- list()\ntwoSent_document$image &lt;- twoSent\nplotImage(twoSent_document)\ntwoSent_document$thin &lt;- thinImage(twoSent_document$image)\nplotImageThinned(twoSent_document)\ntwoSent_processList &lt;- processHandwriting(twoSent_document$thin, dim(twoSent_document$image))"
  },
  {
    "objectID": "man/twoSent.html#two-sentence-printed-example-handwriting",
    "href": "man/twoSent.html#two-sentence-printed-example-handwriting",
    "title": "",
    "section": "",
    "text": "Two sentence printed example handwriting\n\n\n\ntwoSent\n\n\n\n\nBinary image matrix. 396 rows and 1947 columns\n\n\n\n\nlibrary(handwriter)\n\ntwoSent_document &lt;- list()\ntwoSent_document$image &lt;- twoSent\nplotImage(twoSent_document)\n\ntwoSent_document &lt;- list()\ntwoSent_document$image &lt;- twoSent\nplotImage(twoSent_document)\ntwoSent_document$thin &lt;- thinImage(twoSent_document$image)\nplotImageThinned(twoSent_document)\ntwoSent_processList &lt;- processHandwriting(twoSent_document$thin, dim(twoSent_document$image))"
  },
  {
    "objectID": "man/read_and_process.html",
    "href": "man/read_and_process.html",
    "title": "",
    "section": "",
    "text": "Development on read_and_process() is complete. We recommend using processDocument(). read_and_process(image_name, “document”) is equivalent to processDocument(image_name).\n\n\n\nread_and_process(image_name, transform_output)\n\n\n\n\n\n\n\nimage_name\n\n\nThe file path to an image\n\n\n\n\ntransform_output\n\n\nThe type of transformation to perform on the output\n\n\n\n\n\n\nA list of the processed image components\n\n\n\n\nlibrary(handwriter)\n\n# use handwriting example from handwriter package\nimage_path &lt;- system.file(\"extdata\", \"phrase_example.png\", package = \"handwriter\")\ndoc &lt;- read_and_process(image_path, \"document\")"
  },
  {
    "objectID": "man/read_and_process.html#read-and-process",
    "href": "man/read_and_process.html#read-and-process",
    "title": "",
    "section": "",
    "text": "Development on read_and_process() is complete. We recommend using processDocument(). read_and_process(image_name, “document”) is equivalent to processDocument(image_name).\n\n\n\nread_and_process(image_name, transform_output)\n\n\n\n\n\n\n\nimage_name\n\n\nThe file path to an image\n\n\n\n\ntransform_output\n\n\nThe type of transformation to perform on the output\n\n\n\n\n\n\nA list of the processed image components\n\n\n\n\nlibrary(handwriter)\n\n# use handwriting example from handwriter package\nimage_path &lt;- system.file(\"extdata\", \"phrase_example.png\", package = \"handwriter\")\ndoc &lt;- read_and_process(image_path, \"document\")"
  },
  {
    "objectID": "man/rgb2grayscale.html",
    "href": "man/rgb2grayscale.html",
    "title": "",
    "section": "",
    "text": "Changes RGB image to grayscale\n\n\n\nrgb2grayscale(img)\n\n\n\n\n\n\n\nimg\n\n\nA 3D array with slices R, G, and B\n\n\n\n\n\n\nimg as a 3D array as grayscale"
  },
  {
    "objectID": "man/rgb2grayscale.html#rgba2grayscale",
    "href": "man/rgb2grayscale.html#rgba2grayscale",
    "title": "",
    "section": "",
    "text": "Changes RGB image to grayscale\n\n\n\nrgb2grayscale(img)\n\n\n\n\n\n\n\nimg\n\n\nA 3D array with slices R, G, and B\n\n\n\n\n\n\nimg as a 3D array as grayscale"
  },
  {
    "objectID": "man/plot_cluster_fill_counts.html",
    "href": "man/plot_cluster_fill_counts.html",
    "title": "",
    "section": "",
    "text": "Plot the cluster fill counts for each document in formatted_data.\n\n\n\nplot_cluster_fill_counts(formatted_data, facet = TRUE)\n\n\n\n\n\n\n\nformatted_data\n\n\nData created by format_template_data(), fit_model(), or analyze_questioned_documents()\n\n\n\n\nfacet\n\n\nTRUE uses facet_wrap to create a subplot for each writer. FALSE plots the data on a single plot.\n\n\n\n\n\n\nggplot plot of cluster fill counts\n\n\n\n\nlibrary(handwriter)\n\n# Plot cluster fill counts for template training documents\ntemplate_data &lt;- format_template_data(example_cluster_template)\nplot_cluster_fill_counts(formatted_data = template_data, facet = TRUE)\n\n\n\n\n\n\n\n# Plot cluster fill counts for model training documents\nplot_cluster_fill_counts(formatted_data = example_model, facet = TRUE)\n\n\n\n\n\n\n\n# Plot cluster fill counts for questioned documents\nplot_cluster_fill_counts(formatted_data = example_analysis, facet = FALSE)"
  },
  {
    "objectID": "man/plot_cluster_fill_counts.html#plot-cluster-fill-counts",
    "href": "man/plot_cluster_fill_counts.html#plot-cluster-fill-counts",
    "title": "",
    "section": "",
    "text": "Plot the cluster fill counts for each document in formatted_data.\n\n\n\nplot_cluster_fill_counts(formatted_data, facet = TRUE)\n\n\n\n\n\n\n\nformatted_data\n\n\nData created by format_template_data(), fit_model(), or analyze_questioned_documents()\n\n\n\n\nfacet\n\n\nTRUE uses facet_wrap to create a subplot for each writer. FALSE plots the data on a single plot.\n\n\n\n\n\n\nggplot plot of cluster fill counts\n\n\n\n\nlibrary(handwriter)\n\n# Plot cluster fill counts for template training documents\ntemplate_data &lt;- format_template_data(example_cluster_template)\nplot_cluster_fill_counts(formatted_data = template_data, facet = TRUE)\n\n\n\n\n\n\n\n# Plot cluster fill counts for model training documents\nplot_cluster_fill_counts(formatted_data = example_model, facet = TRUE)\n\n\n\n\n\n\n\n# Plot cluster fill counts for questioned documents\nplot_cluster_fill_counts(formatted_data = example_analysis, facet = FALSE)"
  },
  {
    "objectID": "man/example_cluster_template.html",
    "href": "man/example_cluster_template.html",
    "title": "",
    "section": "",
    "text": "An example cluster template created with make_clustering_template(). The cluster template was created from handwriting samples \"w0016_s01_pLND_r01.png\", \"w0080_s01_pLND_r01.png\", \"w0124_s01_pLND_r01.png\", \"w0138_s01_pLND_r01.png\", and \"w0299_s01_pLND_r01.png\" from the CSAFE Handwriting Database. The template has K=5 clusters.\n\n\n\nexample_cluster_template\n\n\n\n\nA list containing a single cluster template created by make_clustering_template(). The cluster template was created by sorting a random sample of 1000 graphs from 10 training documents into 10 clusters with a K-means algorithm. The cluster template is a named list with 16 items:\n\n\ncenters_seed\n\n\nAn integer for the random number generator.\n\n\ncluster\n\n\nA vector of cluster assignments for each graph used to create the cluster template.\n\n\ncenters\n\n\nThe final cluster centers produced by the K-Means algorithm.\n\n\nK\n\n\nThe number of clusters to build (10) with the K-means algorithm.\n\n\nn\n\n\nThe number of training graphs to use (1000) in the K-means algorithm.\n\n\ndocnames\n\n\nA vector that lists the training document from which each graph originated.\n\n\nwriters\n\n\nA vector that lists the writer of each graph.\n\n\niters\n\n\nThe maximum number of iterations for the K-means algorithm (3).\n\n\nchanges\n\n\nA vector of the number of graphs that changed clusters on each iteration of the K-means algorithm.\n\n\noutlierCutoff\n\n\nA vector of the outlier cutoff values calculated on each iteration of the K-means algorithm.\n\n\nstop_reason\n\n\nThe reason the K-means algorithm terminated.\n\n\nwcd\n\n\nA matrix of the within cluster distances on each iteration of the K-means algorithm. More specifically, the distance between each graph and the center of the cluster to which it was assigned on each iteration.\n\n\nwcss\n\n\nA vector of the within-cluster sum of squares on each iteration of the K-means algorithm.\n\n\n\n\n\n\nlibrary(handwriter)\n\n# view cluster fill counts for template training documents\ntemplate_data &lt;- format_template_data(example_cluster_template)\nplot_cluster_fill_counts(template_data, facet = TRUE)"
  },
  {
    "objectID": "man/example_cluster_template.html#example-cluster-template",
    "href": "man/example_cluster_template.html#example-cluster-template",
    "title": "",
    "section": "",
    "text": "An example cluster template created with make_clustering_template(). The cluster template was created from handwriting samples \"w0016_s01_pLND_r01.png\", \"w0080_s01_pLND_r01.png\", \"w0124_s01_pLND_r01.png\", \"w0138_s01_pLND_r01.png\", and \"w0299_s01_pLND_r01.png\" from the CSAFE Handwriting Database. The template has K=5 clusters.\n\n\n\nexample_cluster_template\n\n\n\n\nA list containing a single cluster template created by make_clustering_template(). The cluster template was created by sorting a random sample of 1000 graphs from 10 training documents into 10 clusters with a K-means algorithm. The cluster template is a named list with 16 items:\n\n\ncenters_seed\n\n\nAn integer for the random number generator.\n\n\ncluster\n\n\nA vector of cluster assignments for each graph used to create the cluster template.\n\n\ncenters\n\n\nThe final cluster centers produced by the K-Means algorithm.\n\n\nK\n\n\nThe number of clusters to build (10) with the K-means algorithm.\n\n\nn\n\n\nThe number of training graphs to use (1000) in the K-means algorithm.\n\n\ndocnames\n\n\nA vector that lists the training document from which each graph originated.\n\n\nwriters\n\n\nA vector that lists the writer of each graph.\n\n\niters\n\n\nThe maximum number of iterations for the K-means algorithm (3).\n\n\nchanges\n\n\nA vector of the number of graphs that changed clusters on each iteration of the K-means algorithm.\n\n\noutlierCutoff\n\n\nA vector of the outlier cutoff values calculated on each iteration of the K-means algorithm.\n\n\nstop_reason\n\n\nThe reason the K-means algorithm terminated.\n\n\nwcd\n\n\nA matrix of the within cluster distances on each iteration of the K-means algorithm. More specifically, the distance between each graph and the center of the cluster to which it was assigned on each iteration.\n\n\nwcss\n\n\nA vector of the within-cluster sum of squares on each iteration of the K-means algorithm.\n\n\n\n\n\n\nlibrary(handwriter)\n\n# view cluster fill counts for template training documents\ntemplate_data &lt;- format_template_data(example_cluster_template)\nplot_cluster_fill_counts(template_data, facet = TRUE)"
  },
  {
    "objectID": "man/graphToPrototype.html",
    "href": "man/graphToPrototype.html",
    "title": "",
    "section": "",
    "text": "A graph prototype consists of the starting and ending points of each path in the graph, as well as and evenly spaced points along each path. The prototype also stores the center point of the graph. All points are represented as xy-coordinates and the center point is at (0,0).\n\n\n\ngraphToPrototype(graph, numPathCuts = 8)\n\n\n\n\n\n\n\ngraph\n\n\nA graph from a handwriting sample\n\n\n\n\nnumPathCuts\n\n\nNumber of segments to cut the path(s) into\n\n\n\n\n\n\nList of pathEnds, pathQuarters, and pathCenters given as (x,y) coordinates with the graph centroid at (0,0). The returned list also contains path lengths. pathQuarters gives the (x,y) coordinates of the path at the cut points and despite the name, the path might not be cut into quarters."
  },
  {
    "objectID": "man/graphToPrototype.html#convert-graph-to-a-prototype",
    "href": "man/graphToPrototype.html#convert-graph-to-a-prototype",
    "title": "",
    "section": "",
    "text": "A graph prototype consists of the starting and ending points of each path in the graph, as well as and evenly spaced points along each path. The prototype also stores the center point of the graph. All points are represented as xy-coordinates and the center point is at (0,0).\n\n\n\ngraphToPrototype(graph, numPathCuts = 8)\n\n\n\n\n\n\n\ngraph\n\n\nA graph from a handwriting sample\n\n\n\n\nnumPathCuts\n\n\nNumber of segments to cut the path(s) into\n\n\n\n\n\n\nList of pathEnds, pathQuarters, and pathCenters given as (x,y) coordinates with the graph centroid at (0,0). The returned list also contains path lengths. pathQuarters gives the (x,y) coordinates of the path at the cut points and despite the name, the path might not be cut into quarters."
  },
  {
    "objectID": "man/processHandwriting.html",
    "href": "man/processHandwriting.html",
    "title": "",
    "section": "",
    "text": "The main driver of handwriting processing. Takes in an image of thinned handwriting created with thinImage() and splits the the handwriting into shapes called graphs. Instead of processing the entire document at once, the thinned writing is separated into connected components and each component is split into graphs.\n\n\n\nprocessHandwriting(img, dims)\n\n\n\n\n\n\n\nimg\n\n\nThinned binary image created with thinImage().\n\n\n\n\ndims\n\n\nDimensions of thinned binary image.\n\n\n\n\n\n\nA list of the processed image\n\n\n\n\nlibrary(handwriter)\n\ntwoSent_document &lt;- list()\ntwoSent_document$image &lt;- twoSent\ntwoSent_document$thin &lt;- thinImage(twoSent_document$image)\ntwoSent_processList &lt;- processHandwriting(twoSent_document$thin, dim(twoSent_document$image))"
  },
  {
    "objectID": "man/processHandwriting.html#process-handwriting-by-component",
    "href": "man/processHandwriting.html#process-handwriting-by-component",
    "title": "",
    "section": "",
    "text": "The main driver of handwriting processing. Takes in an image of thinned handwriting created with thinImage() and splits the the handwriting into shapes called graphs. Instead of processing the entire document at once, the thinned writing is separated into connected components and each component is split into graphs.\n\n\n\nprocessHandwriting(img, dims)\n\n\n\n\n\n\n\nimg\n\n\nThinned binary image created with thinImage().\n\n\n\n\ndims\n\n\nDimensions of thinned binary image.\n\n\n\n\n\n\nA list of the processed image\n\n\n\n\nlibrary(handwriter)\n\ntwoSent_document &lt;- list()\ntwoSent_document$image &lt;- twoSent\ntwoSent_document$thin &lt;- thinImage(twoSent_document$image)\ntwoSent_processList &lt;- processHandwriting(twoSent_document$thin, dim(twoSent_document$image))"
  },
  {
    "objectID": "man/plot_cluster_centers.html",
    "href": "man/plot_cluster_centers.html",
    "title": "",
    "section": "",
    "text": "Plot the cluster centers of a cluster template created with make_clustering_template. This function uses a K-Means type algorithm to sort graphs from training documents into clusters. On each iteration of the algorithm, it calculates the mean graph of each cluster and finds the graph in each cluster that is closest to the mean graph. The graphs closest to the mean graphs are used as the cluster centers for the next iteration. Handwriter stores the cluster centers of a cluster template as graph prototypes. A graph prototype consists of the starting and ending points of each path in the graph, as well as and evenly spaced points along each path. The prototype also stores the center point of the graph. All points are represented as xy-coordinates and the center point is at (0,0).\n\n\n\nplot_cluster_centers(template, plot_graphs = FALSE, size = 100)\n\n\n\n\n\n\n\ntemplate\n\n\nA cluster template created with make_clustering_template\n\n\n\n\nplot_graphs\n\n\nTRUE plots all graphs in each cluster in addition to the cluster centers. FALSE only plots the cluster centers.\n\n\n\n\nsize\n\n\nThe size of the output plot\n\n\n\n\n\n\nA plot\n\n\n\n\nlibrary(handwriter)\n\n# plot cluster centers from example template\nplot_cluster_centers(example_cluster_template)\n\n\n\n\n\n\n\nplot_cluster_centers(example_cluster_template, plot_graphs = TRUE)"
  },
  {
    "objectID": "man/plot_cluster_centers.html#plot-template-cluster-centers",
    "href": "man/plot_cluster_centers.html#plot-template-cluster-centers",
    "title": "",
    "section": "",
    "text": "Plot the cluster centers of a cluster template created with make_clustering_template. This function uses a K-Means type algorithm to sort graphs from training documents into clusters. On each iteration of the algorithm, it calculates the mean graph of each cluster and finds the graph in each cluster that is closest to the mean graph. The graphs closest to the mean graphs are used as the cluster centers for the next iteration. Handwriter stores the cluster centers of a cluster template as graph prototypes. A graph prototype consists of the starting and ending points of each path in the graph, as well as and evenly spaced points along each path. The prototype also stores the center point of the graph. All points are represented as xy-coordinates and the center point is at (0,0).\n\n\n\nplot_cluster_centers(template, plot_graphs = FALSE, size = 100)\n\n\n\n\n\n\n\ntemplate\n\n\nA cluster template created with make_clustering_template\n\n\n\n\nplot_graphs\n\n\nTRUE plots all graphs in each cluster in addition to the cluster centers. FALSE only plots the cluster centers.\n\n\n\n\nsize\n\n\nThe size of the output plot\n\n\n\n\n\n\nA plot\n\n\n\n\nlibrary(handwriter)\n\n# plot cluster centers from example template\nplot_cluster_centers(example_cluster_template)\n\n\n\n\n\n\n\nplot_cluster_centers(example_cluster_template, plot_graphs = TRUE)"
  },
  {
    "objectID": "man/example_analysis.html",
    "href": "man/example_analysis.html",
    "title": "",
    "section": "",
    "text": "Example of writership analysis\n\n\n\nexample_analysis\n\n\n\n\nThe results of analyze_questioned_documents() stored in a named list with 5 items:\n\n\ngraph_measurements\n\n\nA data frame of that shows the writer, document name, cluster assignment, slope, principle component rotation angle, and wrapped principle component rotation angle for each training graph in each questioned documents.\n\n\ncluster_fill_counts\n\n\nA data frame of the cluster fill counts for each questioned document.\n\n\nlikelihoods\n\n\nA list of data frames where each data frame contains the likelihoods for a questioned document for each MCMC iteration.\n\n\nvotes\n\n\nA list of vote tallies for each questioned document.\n\n\nposterior_probabilites\n\n\nA list of posterior probabilities of writership for each questioned document and each known writer in the closed set used to train the hierarchical model.\n\n\n\n\n\n\nlibrary(handwriter)\n\nplot_cluster_fill_counts(formatted_data = example_analysis)\n\n\n\n\n\n\n\nplot_posterior_probabilities(analysis = example_analysis)"
  },
  {
    "objectID": "man/example_analysis.html#example-of-writership-analysis",
    "href": "man/example_analysis.html#example-of-writership-analysis",
    "title": "",
    "section": "",
    "text": "Example of writership analysis\n\n\n\nexample_analysis\n\n\n\n\nThe results of analyze_questioned_documents() stored in a named list with 5 items:\n\n\ngraph_measurements\n\n\nA data frame of that shows the writer, document name, cluster assignment, slope, principle component rotation angle, and wrapped principle component rotation angle for each training graph in each questioned documents.\n\n\ncluster_fill_counts\n\n\nA data frame of the cluster fill counts for each questioned document.\n\n\nlikelihoods\n\n\nA list of data frames where each data frame contains the likelihoods for a questioned document for each MCMC iteration.\n\n\nvotes\n\n\nA list of vote tallies for each questioned document.\n\n\nposterior_probabilites\n\n\nA list of posterior probabilities of writership for each questioned document and each known writer in the closed set used to train the hierarchical model.\n\n\n\n\n\n\nlibrary(handwriter)\n\nplot_cluster_fill_counts(formatted_data = example_analysis)\n\n\n\n\n\n\n\nplot_posterior_probabilities(analysis = example_analysis)"
  },
  {
    "objectID": "man/drop_burnin.html",
    "href": "man/drop_burnin.html",
    "title": "",
    "section": "",
    "text": "drop_burnin() removes the burn-in from the Markov Chain Monte Carlo (MCMC) draws.\n\n\n\ndrop_burnin(model, burn_in)\n\n\n\n\n\n\n\nmodel\n\n\nA list of MCMC draws from a model fit with fit_model().\n\n\n\n\nburn_in\n\n\nAn integer number of starting iterations to drop from each MCMC chain.\n\n\n\n\n\n\nA list of data frames of MCMC draws with burn-in dropped.\n\n\n\n\nlibrary(handwriter)\n\nmodel &lt;- drop_burnin(model = example_model, burn_in = 25)\nplot_trace(variable = \"mu[1,2]\", model = example_model)"
  },
  {
    "objectID": "man/drop_burnin.html#drop-burn-in",
    "href": "man/drop_burnin.html#drop-burn-in",
    "title": "",
    "section": "",
    "text": "drop_burnin() removes the burn-in from the Markov Chain Monte Carlo (MCMC) draws.\n\n\n\ndrop_burnin(model, burn_in)\n\n\n\n\n\n\n\nmodel\n\n\nA list of MCMC draws from a model fit with fit_model().\n\n\n\n\nburn_in\n\n\nAn integer number of starting iterations to drop from each MCMC chain.\n\n\n\n\n\n\nA list of data frames of MCMC draws with burn-in dropped.\n\n\n\n\nlibrary(handwriter)\n\nmodel &lt;- drop_burnin(model = example_model, burn_in = 25)\nplot_trace(variable = \"mu[1,2]\", model = example_model)"
  },
  {
    "objectID": "man/about_variable.html",
    "href": "man/about_variable.html",
    "title": "",
    "section": "",
    "text": "about_variable() returns information about the model variable.\n\n\n\nabout_variable(variable, model)\n\n\n\n\n\n\n\nvariable\n\n\nA variable in the fitted model output by fit_model()\n\n\n\n\nmodel\n\n\nA fitted model created by fit_model()\n\n\n\n\n\n\nText that explains the variable\n\n\n\n\nlibrary(handwriter)\n\nabout_variable(\n  variable = \"mu[1,2]\",\n  model = example_model\n)\n\n[1] \"Mu is the location parameter of a wrapped-Cauchy distribution for writer ID w0009 and cluster 2\""
  },
  {
    "objectID": "man/about_variable.html#about-varialbe",
    "href": "man/about_variable.html#about-varialbe",
    "title": "",
    "section": "",
    "text": "about_variable() returns information about the model variable.\n\n\n\nabout_variable(variable, model)\n\n\n\n\n\n\n\nvariable\n\n\nA variable in the fitted model output by fit_model()\n\n\n\n\nmodel\n\n\nA fitted model created by fit_model()\n\n\n\n\n\n\nText that explains the variable\n\n\n\n\nlibrary(handwriter)\n\nabout_variable(\n  variable = \"mu[1,2]\",\n  model = example_model\n)\n\n[1] \"Mu is the location parameter of a wrapped-Cauchy distribution for writer ID w0009 and cluster 2\""
  },
  {
    "objectID": "man/nature1.html",
    "href": "man/nature1.html",
    "title": "",
    "section": "",
    "text": "Full page image of the 4th sample (nature) of handwriting from the first writer.\n\n\n\nnature1\n\n\n\n\nBinary image matrix. 811 rows and 1590 columns.\n\n\n\n\nlibrary(handwriter)\n\nnature1_document &lt;- list()\nnature1_document$image &lt;- nature1\nplotImage(nature1_document)\n\nnature1_document &lt;- list()\nnature1_document$image &lt;- nature1\nplotImage(nature1_document)\nnature1_document$thin &lt;- thinImage(nature1_document$image)\nplotImageThinned(nature1_document)\nnature1_processList &lt;- processHandwriting(nature1_document$thin, dim(nature1_document$image))"
  },
  {
    "objectID": "man/nature1.html#full-page-image-of-the-4th-sample-nature-of-handwriting-from-the-first-writer.",
    "href": "man/nature1.html#full-page-image-of-the-4th-sample-nature-of-handwriting-from-the-first-writer.",
    "title": "",
    "section": "",
    "text": "Full page image of the 4th sample (nature) of handwriting from the first writer.\n\n\n\nnature1\n\n\n\n\nBinary image matrix. 811 rows and 1590 columns.\n\n\n\n\nlibrary(handwriter)\n\nnature1_document &lt;- list()\nnature1_document$image &lt;- nature1\nplotImage(nature1_document)\n\nnature1_document &lt;- list()\nnature1_document$image &lt;- nature1\nplotImage(nature1_document)\nnature1_document$thin &lt;- thinImage(nature1_document$image)\nplotImageThinned(nature1_document)\nnature1_processList &lt;- processHandwriting(nature1_document$thin, dim(nature1_document$image))"
  },
  {
    "objectID": "man/rgba2rgb.html",
    "href": "man/rgba2rgb.html",
    "title": "",
    "section": "",
    "text": "Removes alpha channel from png image.\n\n\n\nrgba2rgb(img)\n\n\n\n\n\n\n\nimg\n\n\nA 3-d array with slices R, G, B, and alpha.\n\n\n\n\n\n\nimg as a 3D array with alpha channel removed"
  },
  {
    "objectID": "man/rgba2rgb.html#rgba2rgb",
    "href": "man/rgba2rgb.html#rgba2rgb",
    "title": "",
    "section": "",
    "text": "Removes alpha channel from png image.\n\n\n\nrgba2rgb(img)\n\n\n\n\n\n\n\nimg\n\n\nA 3-d array with slices R, G, B, and alpha.\n\n\n\n\n\n\nimg as a 3D array with alpha channel removed"
  },
  {
    "objectID": "man/get_clusters_batch.html",
    "href": "man/get_clusters_batch.html",
    "title": "",
    "section": "",
    "text": "get_clusters_batch\n\n\n\nget_clusters_batch(\n  template,\n  input_dir,\n  output_dir,\n  writer_indices,\n  doc_indices,\n  num_cores = 1,\n  save_master_file = FALSE\n)\n\n\n\n\n\n\n\ntemplate\n\n\nA cluster template created with make_clustering_template\n\n\n\n\ninput_dir\n\n\nA directory containing graphs created with process_batch_dir\n\n\n\n\noutput_dir\n\n\nOutput directory for cluster assignments\n\n\n\n\nwriter_indices\n\n\nVector of start and end indices for the writer id in the graph file names\n\n\n\n\ndoc_indices\n\n\nVector of start and end indices for the document id in the graph file names\n\n\n\n\nnum_cores\n\n\nInteger number of cores to use for parallel processing\n\n\n\n\nsave_master_file\n\n\nTRUE or FALSE. If TRUE, a master file named ‘all_clusters.rds’ containing the cluster assignments for all documents in the input directory will be saved to the output directory. If FASLE, a master file will not be saved, but the individual files for each document in the input directory will still be saved to the output directory.\n\n\n\n\n\n\nA list of cluster assignments\n\n\n\n\nlibrary(handwriter)\n\ntemplate &lt;- readRDS('path/to/template.rds')\nget_clusters_batch(template=template, input_dir='path/to/dir', output_dir='path/to/dir',\nwriter_indices=c(2,5), doc_indices=c(7,18), num_cores=1)\n\nget_clusters_batch(template=template, input_dir='path/to/dir', output_dir='path/to/dir',\nwriter_indices=c(1,4), doc_indices=c(5,10), num_cores=5)"
  },
  {
    "objectID": "man/get_clusters_batch.html#get_clusters_batch",
    "href": "man/get_clusters_batch.html#get_clusters_batch",
    "title": "",
    "section": "",
    "text": "get_clusters_batch\n\n\n\nget_clusters_batch(\n  template,\n  input_dir,\n  output_dir,\n  writer_indices,\n  doc_indices,\n  num_cores = 1,\n  save_master_file = FALSE\n)\n\n\n\n\n\n\n\ntemplate\n\n\nA cluster template created with make_clustering_template\n\n\n\n\ninput_dir\n\n\nA directory containing graphs created with process_batch_dir\n\n\n\n\noutput_dir\n\n\nOutput directory for cluster assignments\n\n\n\n\nwriter_indices\n\n\nVector of start and end indices for the writer id in the graph file names\n\n\n\n\ndoc_indices\n\n\nVector of start and end indices for the document id in the graph file names\n\n\n\n\nnum_cores\n\n\nInteger number of cores to use for parallel processing\n\n\n\n\nsave_master_file\n\n\nTRUE or FALSE. If TRUE, a master file named ‘all_clusters.rds’ containing the cluster assignments for all documents in the input directory will be saved to the output directory. If FASLE, a master file will not be saved, but the individual files for each document in the input directory will still be saved to the output directory.\n\n\n\n\n\n\nA list of cluster assignments\n\n\n\n\nlibrary(handwriter)\n\ntemplate &lt;- readRDS('path/to/template.rds')\nget_clusters_batch(template=template, input_dir='path/to/dir', output_dir='path/to/dir',\nwriter_indices=c(2,5), doc_indices=c(7,18), num_cores=1)\n\nget_clusters_batch(template=template, input_dir='path/to/dir', output_dir='path/to/dir',\nwriter_indices=c(1,4), doc_indices=c(5,10), num_cores=5)"
  },
  {
    "objectID": "man/whichToFill.html",
    "href": "man/whichToFill.html",
    "title": "",
    "section": "",
    "text": "Finds pixels in the plot that shouldn’t be white and makes them black. Quick and helpful cleaning for before the thinning algorithm runs.\n\n\n\nwhichToFill(img)\n\n\n\n\n\n\n\nimg\n\n\nA binary matrix.\n\n\n\n\n\n\nA cleaned up image."
  },
  {
    "objectID": "man/whichToFill.html#whichtofill",
    "href": "man/whichToFill.html#whichtofill",
    "title": "",
    "section": "",
    "text": "Finds pixels in the plot that shouldn’t be white and makes them black. Quick and helpful cleaning for before the thinning algorithm runs.\n\n\n\nwhichToFill(img)\n\n\n\n\n\n\n\nimg\n\n\nA binary matrix.\n\n\n\n\n\n\nA cleaned up image."
  },
  {
    "objectID": "man/calculate_accuracy.html",
    "href": "man/calculate_accuracy.html",
    "title": "",
    "section": "",
    "text": "Fit a model with fit_model() and calculate posterior probabilities of writership with analyze_questioned_documents() of a set of test documents where the ground truth is known. Then use calculate_accuracy() to measure the accuracy of the fitted model on the test documents. Accuracy is calculated as the average posterior probability assigned to the true writer.\n\n\n\ncalculate_accuracy(analysis)\n\n\n\n\n\n\n\nanalysis\n\n\nWritership analysis output by analyze_questioned_documents\n\n\n\n\n\n\nThe model’s accuracy on the test set as a number\n\n\n\n\nlibrary(handwriter)\n\n# calculate the accuracy for example analysis performed on test documents and a model with 1 chain\ncalculate_accuracy(example_analysis)\n\nmain_dir &lt;- \"/path/to/main_dir\"\ntest_images_dir &lt;- \"/path/to/test_images\"\nanalysis &lt;- analyze_questioned_documents(\n  main_dir = main_dir,\n  questioned_docs = test_images_dir,\n  model = model,\n  num_cores = 2,\n  writer_indices = c(2, 5),\n  doc_indices = c(7, 18)\n)\ncalculate_accuracy(analysis)"
  },
  {
    "objectID": "man/calculate_accuracy.html#calculate-accuracy",
    "href": "man/calculate_accuracy.html#calculate-accuracy",
    "title": "",
    "section": "",
    "text": "Fit a model with fit_model() and calculate posterior probabilities of writership with analyze_questioned_documents() of a set of test documents where the ground truth is known. Then use calculate_accuracy() to measure the accuracy of the fitted model on the test documents. Accuracy is calculated as the average posterior probability assigned to the true writer.\n\n\n\ncalculate_accuracy(analysis)\n\n\n\n\n\n\n\nanalysis\n\n\nWritership analysis output by analyze_questioned_documents\n\n\n\n\n\n\nThe model’s accuracy on the test set as a number\n\n\n\n\nlibrary(handwriter)\n\n# calculate the accuracy for example analysis performed on test documents and a model with 1 chain\ncalculate_accuracy(example_analysis)\n\nmain_dir &lt;- \"/path/to/main_dir\"\ntest_images_dir &lt;- \"/path/to/test_images\"\nanalysis &lt;- analyze_questioned_documents(\n  main_dir = main_dir,\n  questioned_docs = test_images_dir,\n  model = model,\n  num_cores = 2,\n  writer_indices = c(2, 5),\n  doc_indices = c(7, 18)\n)\ncalculate_accuracy(analysis)"
  },
  {
    "objectID": "man/message.html",
    "href": "man/message.html",
    "title": "",
    "section": "",
    "text": "Full page image of the handwritten London letter.\n\n\n\nmessage\n\n\n\n\nBinary image matrix. 1262 rows and 1162 columns.\n\n\n\n\nlibrary(handwriter)\n\nmessage_document &lt;- list()\nmessage_document$image &lt;- message\nplotImage(message_document)\n\nmessage_document &lt;- list()\nmessage_document$image &lt;- message\nplotImage(message_document)\nmessage_document$thin &lt;- thinImage(message_document$image)\nplotImageThinned(message_document)\nmessage_processList &lt;- processHandwriting(message_document$thin, dim(message_document$image))"
  },
  {
    "objectID": "man/message.html#full-page-image-of-the-handwritten-london-letter.",
    "href": "man/message.html#full-page-image-of-the-handwritten-london-letter.",
    "title": "",
    "section": "",
    "text": "Full page image of the handwritten London letter.\n\n\n\nmessage\n\n\n\n\nBinary image matrix. 1262 rows and 1162 columns.\n\n\n\n\nlibrary(handwriter)\n\nmessage_document &lt;- list()\nmessage_document$image &lt;- message\nplotImage(message_document)\n\nmessage_document &lt;- list()\nmessage_document$image &lt;- message\nplotImage(message_document)\nmessage_document$thin &lt;- thinImage(message_document$image)\nplotImageThinned(message_document)\nmessage_processList &lt;- processHandwriting(message_document$thin, dim(message_document$image))"
  },
  {
    "objectID": "man/fit_model.html",
    "href": "man/fit_model.html",
    "title": "",
    "section": "",
    "text": "fit_model() fits a Bayesian hierarchical model to the model training data in model_docs and draws samples from the model as Markov Chain Monte Carlo (MCMC) estimates.\n\n\n\nfit_model(\n  main_dir,\n  model_docs,\n  num_iters,\n  num_chains = 1,\n  num_cores,\n  writer_indices,\n  doc_indices,\n  a = 2,\n  b = 0.25,\n  c = 2,\n  d = 2,\n  e = 0.5\n)\n\n\n\n\n\n\n\nmain_dir\n\n\nA directory that contains a cluster template created by make_clustering_template()\n\n\n\n\nmodel_docs\n\n\nA directory containing model training documents\n\n\n\n\nnum_iters\n\n\nAn integer number of iterations of MCMC.\n\n\n\n\nnum_chains\n\n\nAn integer number of chains to use.\n\n\n\n\nnum_cores\n\n\nAn integer number of cores to use for parallel processing clustering assignments. The model fitting is not done in parallel.\n\n\n\n\nwriter_indices\n\n\nA vector of the start and stop character of the writer ID in the model training file names. E.g., if the file names are writer0195_doc1, writer0210_doc1, writer0033_doc1 then writer_indices is ‘c(7,10)’.\n\n\n\n\ndoc_indices\n\n\nA vector of the start and stop character of the \"document name\" in the model training file names. This is used to distinguish between two documents written by the same writer. E.g., if the file names are writer0195_doc1, writer0195_doc2, writer0033_doc1, writer0033_doc2 then doc_indices are ‘c(12,15)’.\n\n\n\n\na\n\n\nThe shape parameter for the Gamma distribution in the hierarchical model\n\n\n\n\nb\n\n\nThe rate parameter for the Gamma distribution in the hierarchical model\n\n\n\n\nc\n\n\nThe first shape parameter for the Beta distribution in the hierarchical model\n\n\n\n\nd\n\n\nThe second shape parameter for the Beta distribution in the hierarchical model\n\n\n\n\ne\n\n\nThe scale parameter for the hyper prior for mu in the hierarchical model\n\n\n\n\n\n\nA list of training data used to fit the model and the fitted model\n\n\n\n\nlibrary(handwriter)\n\nmain_dir &lt;- \"/path/to/main_dir\"\nmodel_docs &lt;- \"path/to/model_training_docs\"\nquestioned_docs &lt;- \"path/to/questioned_docs\"\n\nmodel &lt;- fit_model(\n  main_dir = main_dir,\n  model_docs = model_docs,\n  num_iters = 100,\n  num_chains = 1,\n  num_cores = 2,\n  writer_indices = c(2, 5),\n  doc_indices = c(7, 18)\n)\n\nmodel &lt;- drop_burnin(model = model, burn_in = 25)\n\nanalysis &lt;- analyze_questioned_documents(\n  main_dir = main_dir,\n  questioned_docs = questioned_docs,\n  model = model,\n  num_cores = 2\n)\nanalysis$posterior_probabilities"
  },
  {
    "objectID": "man/fit_model.html#fit-model",
    "href": "man/fit_model.html#fit-model",
    "title": "",
    "section": "",
    "text": "fit_model() fits a Bayesian hierarchical model to the model training data in model_docs and draws samples from the model as Markov Chain Monte Carlo (MCMC) estimates.\n\n\n\nfit_model(\n  main_dir,\n  model_docs,\n  num_iters,\n  num_chains = 1,\n  num_cores,\n  writer_indices,\n  doc_indices,\n  a = 2,\n  b = 0.25,\n  c = 2,\n  d = 2,\n  e = 0.5\n)\n\n\n\n\n\n\n\nmain_dir\n\n\nA directory that contains a cluster template created by make_clustering_template()\n\n\n\n\nmodel_docs\n\n\nA directory containing model training documents\n\n\n\n\nnum_iters\n\n\nAn integer number of iterations of MCMC.\n\n\n\n\nnum_chains\n\n\nAn integer number of chains to use.\n\n\n\n\nnum_cores\n\n\nAn integer number of cores to use for parallel processing clustering assignments. The model fitting is not done in parallel.\n\n\n\n\nwriter_indices\n\n\nA vector of the start and stop character of the writer ID in the model training file names. E.g., if the file names are writer0195_doc1, writer0210_doc1, writer0033_doc1 then writer_indices is ‘c(7,10)’.\n\n\n\n\ndoc_indices\n\n\nA vector of the start and stop character of the \"document name\" in the model training file names. This is used to distinguish between two documents written by the same writer. E.g., if the file names are writer0195_doc1, writer0195_doc2, writer0033_doc1, writer0033_doc2 then doc_indices are ‘c(12,15)’.\n\n\n\n\na\n\n\nThe shape parameter for the Gamma distribution in the hierarchical model\n\n\n\n\nb\n\n\nThe rate parameter for the Gamma distribution in the hierarchical model\n\n\n\n\nc\n\n\nThe first shape parameter for the Beta distribution in the hierarchical model\n\n\n\n\nd\n\n\nThe second shape parameter for the Beta distribution in the hierarchical model\n\n\n\n\ne\n\n\nThe scale parameter for the hyper prior for mu in the hierarchical model\n\n\n\n\n\n\nA list of training data used to fit the model and the fitted model\n\n\n\n\nlibrary(handwriter)\n\nmain_dir &lt;- \"/path/to/main_dir\"\nmodel_docs &lt;- \"path/to/model_training_docs\"\nquestioned_docs &lt;- \"path/to/questioned_docs\"\n\nmodel &lt;- fit_model(\n  main_dir = main_dir,\n  model_docs = model_docs,\n  num_iters = 100,\n  num_chains = 1,\n  num_cores = 2,\n  writer_indices = c(2, 5),\n  doc_indices = c(7, 18)\n)\n\nmodel &lt;- drop_burnin(model = model, burn_in = 25)\n\nanalysis &lt;- analyze_questioned_documents(\n  main_dir = main_dir,\n  questioned_docs = questioned_docs,\n  model = model,\n  num_cores = 2\n)\nanalysis$posterior_probabilities"
  },
  {
    "objectID": "man/plot_trace.html",
    "href": "man/plot_trace.html",
    "title": "",
    "section": "",
    "text": "Create a trace plot for all chains for a single variable of a fitted model created by fit_model(). If the model contains more than one chain, the chains will be combined by pasting them together.\n\n\n\nplot_trace(variable, model)\n\n\n\n\n\n\n\nvariable\n\n\nThe name of a variable in the model\n\n\n\n\nmodel\n\n\nA model created by fit_model()\n\n\n\n\n\n\nA trace plot\n\n\n\n\nlibrary(handwriter)\n\nplot_trace(model = example_model, variable = \"pi[1,1]\")\n\n\n\n\n\n\n\nplot_trace(model = example_model, variable = \"mu[2,3]\")"
  },
  {
    "objectID": "man/plot_trace.html#plot-trace",
    "href": "man/plot_trace.html#plot-trace",
    "title": "",
    "section": "",
    "text": "Create a trace plot for all chains for a single variable of a fitted model created by fit_model(). If the model contains more than one chain, the chains will be combined by pasting them together.\n\n\n\nplot_trace(variable, model)\n\n\n\n\n\n\n\nvariable\n\n\nThe name of a variable in the model\n\n\n\n\nmodel\n\n\nA model created by fit_model()\n\n\n\n\n\n\nA trace plot\n\n\n\n\nlibrary(handwriter)\n\nplot_trace(model = example_model, variable = \"pi[1,1]\")\n\n\n\n\n\n\n\nplot_trace(model = example_model, variable = \"mu[2,3]\")"
  },
  {
    "objectID": "man/process_batch_list.html",
    "href": "man/process_batch_list.html",
    "title": "",
    "section": "",
    "text": "Process a list of handwriting samples saved as PNG images: (1) Load the image and convert it to black and white with readPNGBinary() (2) Thin the handwriting to one pixel in width with thinImage() (3) Run processHandwriting() to split the handwriting into parts called edges and place nodes at the ends of edges. Then combine edges into component shapes called graphs. (4) Save the processed document in an RDS file. (5) Optional. Return a list of the processed documents.\n\n\n\nprocess_batch_list(images, output_dir, skip_docs_on_retry = TRUE)\n\n\n\n\n\n\n\nimages\n\n\nA vector of image file paths\n\n\n\n\noutput_dir\n\n\nA directory to save the processed images\n\n\n\n\nskip_docs_on_retry\n\n\nLogical whether to skip documents in the images arguement that caused errors on a previous run. The errors and document names are stored in output_dir &gt; problems.txt. If this is the first run, process_batch_list will attempt to process all documents in the images arguement.\n\n\n\n\n\n\nNo return value, called for side effects\n\n\n\n\nlibrary(handwriter)\n\nimages &lt;- c('path/to/image1.png', 'path/to/image2.png', 'path/to/image3.png')\nprocess_batch_list(images, \"path/to/output_dir\", FALSE)\nprocess_batch_list(images, \"path/to/output_dir\", TRUE)"
  },
  {
    "objectID": "man/process_batch_list.html#process-batch-list",
    "href": "man/process_batch_list.html#process-batch-list",
    "title": "",
    "section": "",
    "text": "Process a list of handwriting samples saved as PNG images: (1) Load the image and convert it to black and white with readPNGBinary() (2) Thin the handwriting to one pixel in width with thinImage() (3) Run processHandwriting() to split the handwriting into parts called edges and place nodes at the ends of edges. Then combine edges into component shapes called graphs. (4) Save the processed document in an RDS file. (5) Optional. Return a list of the processed documents.\n\n\n\nprocess_batch_list(images, output_dir, skip_docs_on_retry = TRUE)\n\n\n\n\n\n\n\nimages\n\n\nA vector of image file paths\n\n\n\n\noutput_dir\n\n\nA directory to save the processed images\n\n\n\n\nskip_docs_on_retry\n\n\nLogical whether to skip documents in the images arguement that caused errors on a previous run. The errors and document names are stored in output_dir &gt; problems.txt. If this is the first run, process_batch_list will attempt to process all documents in the images arguement.\n\n\n\n\n\n\nNo return value, called for side effects\n\n\n\n\nlibrary(handwriter)\n\nimages &lt;- c('path/to/image1.png', 'path/to/image2.png', 'path/to/image3.png')\nprocess_batch_list(images, \"path/to/output_dir\", FALSE)\nprocess_batch_list(images, \"path/to/output_dir\", TRUE)"
  },
  {
    "objectID": "man/example_model.html",
    "href": "man/example_model.html",
    "title": "",
    "section": "",
    "text": "Example of a hierarchical model\n\n\n\nexample_model\n\n\n\n\nA hierarchical model created by fit_model with a single chain of 100 MCMC iterations. It is a named list of 4 objects:\n\n\ngraph_measurements\n\n\nA data frame of model training data that shows the writer, document name, cluster assignment, slope, principle component rotation angle, and wrapped principle component rotation angle for each training graph.\n\n\ncluster_fill_counts\n\n\nA data frame of the cluster fill counts for each model training document.\n\n\nrjags_data\n\n\nThe model training information from graph_measurements and cluster_fill_counts formatted for RJAGS.\n\n\nfitted_model\n\n\nA model fit using the rjags_data and the RJAGS and coda packages. It is an MCMC list that contains a single MCMC object.\n\n\n\n\n\n\nlibrary(handwriter)\n\n# convert to a data frame and view all variable names\ndf &lt;- as.data.frame(coda::as.mcmc(example_model$fitted_model))\ncolnames(df)\n\n# view a trace plot\nplot_trace(variable = \"mu[1,1]\", model = example_model)\n\n# drop the first 25 MCMC iterations for burn-in\nmodel &lt;- drop_burnin(model = example_model, burn_in = 25)\n\n# analyze questioned documents\nmain_dir &lt;- /path/to/main_dir\nquestioned_docs &lt;- /path/to/questioned_documents_directory\nanalysis &lt;- analyze_questioned_documents(\n   main_dir = main_dir,\n   questioned_docs = questioned_docs\n   model = example_model\n   num_cores = 2\n)\nanalysis$posterior_probabilities"
  },
  {
    "objectID": "man/example_model.html#example-of-a-hierarchical-model",
    "href": "man/example_model.html#example-of-a-hierarchical-model",
    "title": "",
    "section": "",
    "text": "Example of a hierarchical model\n\n\n\nexample_model\n\n\n\n\nA hierarchical model created by fit_model with a single chain of 100 MCMC iterations. It is a named list of 4 objects:\n\n\ngraph_measurements\n\n\nA data frame of model training data that shows the writer, document name, cluster assignment, slope, principle component rotation angle, and wrapped principle component rotation angle for each training graph.\n\n\ncluster_fill_counts\n\n\nA data frame of the cluster fill counts for each model training document.\n\n\nrjags_data\n\n\nThe model training information from graph_measurements and cluster_fill_counts formatted for RJAGS.\n\n\nfitted_model\n\n\nA model fit using the rjags_data and the RJAGS and coda packages. It is an MCMC list that contains a single MCMC object.\n\n\n\n\n\n\nlibrary(handwriter)\n\n# convert to a data frame and view all variable names\ndf &lt;- as.data.frame(coda::as.mcmc(example_model$fitted_model))\ncolnames(df)\n\n# view a trace plot\nplot_trace(variable = \"mu[1,1]\", model = example_model)\n\n# drop the first 25 MCMC iterations for burn-in\nmodel &lt;- drop_burnin(model = example_model, burn_in = 25)\n\n# analyze questioned documents\nmain_dir &lt;- /path/to/main_dir\nquestioned_docs &lt;- /path/to/questioned_documents_directory\nanalysis &lt;- analyze_questioned_documents(\n   main_dir = main_dir,\n   questioned_docs = questioned_docs\n   model = example_model\n   num_cores = 2\n)\nanalysis$posterior_probabilities"
  },
  {
    "objectID": "man/analyze_questioned_documents.html",
    "href": "man/analyze_questioned_documents.html",
    "title": "",
    "section": "",
    "text": "analyze_questioned_documents() estimates the posterior probability of writership for the questioned documents using Markov Chain Monte Carlo (MCMC) draws from a hierarchical model created with fit_model().\n\n\n\nanalyze_questioned_documents(\n  main_dir,\n  questioned_docs,\n  model,\n  num_cores,\n  writer_indices,\n  doc_indices\n)\n\n\n\n\n\n\n\nmain_dir\n\n\nA directory that contains a cluster template created by make_clustering_template()\n\n\n\n\nquestioned_docs\n\n\nA directory containing questioned documents\n\n\n\n\nmodel\n\n\nA fitted model created by fit_model()\n\n\n\n\nnum_cores\n\n\nAn integer number of cores to use for parallel processing with the doParallel package.\n\n\n\n\nwriter_indices\n\n\nA vector of start and stop characters for writer IDs in file names\n\n\n\n\ndoc_indices\n\n\nA vector of start and stop characters for document names in file names\n\n\n\n\n\n\nA list of likelihoods, votes, and posterior probabilities of writership for each questioned document.\n\n\n\n\nlibrary(handwriter)\n\nmain_dir &lt;- \"/path/to/main_dir\"\nquestioned_docs &lt;- \"/path/to/questioned_images\"\nanalysis &lt;- analyze_questioned_documents(\n  main_dir = main_dir,\n  questioned_docs = questioned_docs,\n  model = model,\n  num_cores = 2,\n  writer_indices = c(2, 5),\n  doc_indices = c(7, 18)\n)\nanalysis$posterior_probabilities"
  },
  {
    "objectID": "man/analyze_questioned_documents.html#analyze-questioned-documents",
    "href": "man/analyze_questioned_documents.html#analyze-questioned-documents",
    "title": "",
    "section": "",
    "text": "analyze_questioned_documents() estimates the posterior probability of writership for the questioned documents using Markov Chain Monte Carlo (MCMC) draws from a hierarchical model created with fit_model().\n\n\n\nanalyze_questioned_documents(\n  main_dir,\n  questioned_docs,\n  model,\n  num_cores,\n  writer_indices,\n  doc_indices\n)\n\n\n\n\n\n\n\nmain_dir\n\n\nA directory that contains a cluster template created by make_clustering_template()\n\n\n\n\nquestioned_docs\n\n\nA directory containing questioned documents\n\n\n\n\nmodel\n\n\nA fitted model created by fit_model()\n\n\n\n\nnum_cores\n\n\nAn integer number of cores to use for parallel processing with the doParallel package.\n\n\n\n\nwriter_indices\n\n\nA vector of start and stop characters for writer IDs in file names\n\n\n\n\ndoc_indices\n\n\nA vector of start and stop characters for document names in file names\n\n\n\n\n\n\nA list of likelihoods, votes, and posterior probabilities of writership for each questioned document.\n\n\n\n\nlibrary(handwriter)\n\nmain_dir &lt;- \"/path/to/main_dir\"\nquestioned_docs &lt;- \"/path/to/questioned_images\"\nanalysis &lt;- analyze_questioned_documents(\n  main_dir = main_dir,\n  questioned_docs = questioned_docs,\n  model = model,\n  num_cores = 2,\n  writer_indices = c(2, 5),\n  doc_indices = c(7, 18)\n)\nanalysis$posterior_probabilities"
  },
  {
    "objectID": "man/addToFeatures.html",
    "href": "man/addToFeatures.html",
    "title": "",
    "section": "",
    "text": "addToFeatures\n\n\n\naddToFeatures(FeatureSet, LetterList, vectorDims)\n\n\n\n\n\n\n\nFeatureSet\n\n\nThe current list of features that have been calculated\n\n\n\n\nLetterList\n\n\nList of all letters and their information\n\n\n\n\nvectorDims\n\n\nVectors with image Dims\n\n\n\n\n\n\nA list consisting of current features calculated in FeatureSet as well as measures of compactness, loop count, and loop dimensions"
  },
  {
    "objectID": "man/addToFeatures.html#addtofeatures",
    "href": "man/addToFeatures.html#addtofeatures",
    "title": "",
    "section": "",
    "text": "addToFeatures\n\n\n\naddToFeatures(FeatureSet, LetterList, vectorDims)\n\n\n\n\n\n\n\nFeatureSet\n\n\nThe current list of features that have been calculated\n\n\n\n\nLetterList\n\n\nList of all letters and their information\n\n\n\n\nvectorDims\n\n\nVectors with image Dims\n\n\n\n\n\n\nA list consisting of current features calculated in FeatureSet as well as measures of compactness, loop count, and loop dimensions"
  },
  {
    "objectID": "man/plotImageThinned.html",
    "href": "man/plotImageThinned.html",
    "title": "",
    "section": "",
    "text": "This function returns a plot with the full image plotted in light gray and the thinned skeleton printed in black on top.\n\n\n\nplotImageThinned(doc)\n\n\n\n\n\n\n\ndoc\n\n\nA document processed with processHandwriting()\n\n\n\n\n\n\ngpplot plot of thinned image\n\n\n\n\nlibrary(handwriter)\n\ncsafe_document &lt;- list()\ncsafe_document$image &lt;- csafe\ncsafe_document$thin &lt;- thinImage(csafe_document$image)\nplotImageThinned(csafe_document)"
  },
  {
    "objectID": "man/plotImageThinned.html#plot-thinned-image",
    "href": "man/plotImageThinned.html#plot-thinned-image",
    "title": "",
    "section": "",
    "text": "This function returns a plot with the full image plotted in light gray and the thinned skeleton printed in black on top.\n\n\n\nplotImageThinned(doc)\n\n\n\n\n\n\n\ndoc\n\n\nA document processed with processHandwriting()\n\n\n\n\n\n\ngpplot plot of thinned image\n\n\n\n\nlibrary(handwriter)\n\ncsafe_document &lt;- list()\ncsafe_document$image &lt;- csafe\ncsafe_document$thin &lt;- thinImage(csafe_document$image)\nplotImageThinned(csafe_document)"
  },
  {
    "objectID": "man/plotNodes.html",
    "href": "man/plotNodes.html",
    "title": "",
    "section": "",
    "text": "This function returns a plot with the full image plotted in light gray and the skeleton printed in black, with red triangles over the vertices. Also called from plotPath, which is a more useful function, in general.\n\n\n\nplotNodes(doc, plot_break_pts = FALSE, nodeSize = 3, nodeColor = \"red\")\n\n\n\n\n\n\n\ndoc\n\n\nA document processed with processHandwriting()\n\n\n\n\nplot_break_pts\n\n\nLogical value as to whether to plot nodes or break points. plot_break_pts=FALSE plots nodes and plot_break_pts=TRUE plots break point.\n\n\n\n\nnodeSize\n\n\nSize of triangles printed. 3 by default. Move down to 2 or 1 for small text images.\n\n\n\n\nnodeColor\n\n\nWhich color the nodes should be\n\n\n\n\n\n\nPlot of full and thinned image with vertices overlaid.\n\n\n\n\nlibrary(handwriter)\n\ncsafe_document &lt;- list()\ncsafe_document$image &lt;- csafe\ncsafe_document$thin &lt;- thinImage(csafe_document$image)\ncsafe_document$process &lt;- processHandwriting(csafe_document$thin, dim(csafe_document$image))\nplotNodes(csafe_document)\n\n\n\n\n\n\n\nplotNodes(csafe_document, nodeSize=6, nodeColor=\"black\")"
  },
  {
    "objectID": "man/plotNodes.html#plot-nodes",
    "href": "man/plotNodes.html#plot-nodes",
    "title": "",
    "section": "",
    "text": "This function returns a plot with the full image plotted in light gray and the skeleton printed in black, with red triangles over the vertices. Also called from plotPath, which is a more useful function, in general.\n\n\n\nplotNodes(doc, plot_break_pts = FALSE, nodeSize = 3, nodeColor = \"red\")\n\n\n\n\n\n\n\ndoc\n\n\nA document processed with processHandwriting()\n\n\n\n\nplot_break_pts\n\n\nLogical value as to whether to plot nodes or break points. plot_break_pts=FALSE plots nodes and plot_break_pts=TRUE plots break point.\n\n\n\n\nnodeSize\n\n\nSize of triangles printed. 3 by default. Move down to 2 or 1 for small text images.\n\n\n\n\nnodeColor\n\n\nWhich color the nodes should be\n\n\n\n\n\n\nPlot of full and thinned image with vertices overlaid.\n\n\n\n\nlibrary(handwriter)\n\ncsafe_document &lt;- list()\ncsafe_document$image &lt;- csafe\ncsafe_document$thin &lt;- thinImage(csafe_document$image)\ncsafe_document$process &lt;- processHandwriting(csafe_document$thin, dim(csafe_document$image))\nplotNodes(csafe_document)\n\n\n\n\n\n\n\nplotNodes(csafe_document, nodeSize=6, nodeColor=\"black\")"
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "",
    "section": "",
    "text": "GNU AFFERO GENERAL PUBLIC LICENSE\n                   Version 3, 19 November 2007\nCopyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.\n                        Preamble\nThe GNU Affero General Public License is a free, copyleft license for software and other kinds of works, specifically designed to ensure cooperation with the community in the case of network server software.\nThe licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, our General Public Licenses are intended to guarantee your freedom to share and change all versions of a program–to make sure it remains free software for all its users.\nWhen we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.\nDevelopers that use our General Public Licenses protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License which gives you legal permission to copy, distribute and/or modify the software.\nA secondary benefit of defending all users’ freedom is that improvements made in alternate versions of the program, if they receive widespread use, become available for other developers to incorporate. Many developers of free software are heartened and encouraged by the resulting cooperation. However, in the case of software used on network servers, this result may fail to come about. The GNU General Public License permits making a modified version and letting the public access it on a server without ever releasing its source code to the public.\nThe GNU Affero General Public License is designed specifically to ensure that, in such cases, the modified source code becomes available to the community. It requires the operator of a network server to provide the source code of the modified version running there to the users of that server. Therefore, public use of a modified version, on a publicly accessible server, gives the public access to the source code of the modified version.\nAn older license, called the Affero General Public License and published by Affero, was designed to accomplish similar goals. This is a different license, not a version of the Affero GPL, but Affero has released a new version of the Affero GPL which permits relicensing under this license.\nThe precise terms and conditions for copying, distribution and modification follow.\n                   TERMS AND CONDITIONS\n\nDefinitions.\n\n“This License” refers to version 3 of the GNU Affero General Public License.\n“Copyright” also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.\n“The Program” refers to any copyrightable work licensed under this License. Each licensee is addressed as “you”. “Licensees” and “recipients” may be individuals or organizations.\nTo “modify” a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a “modified version” of the earlier work or a work “based on” the earlier work.\nA “covered work” means either the unmodified Program or a work based on the Program.\nTo “propagate” a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.\nTo “convey” a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.\nAn interactive user interface displays “Appropriate Legal Notices” to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.\n\nSource Code.\n\nThe “source code” for a work means the preferred form of the work for making modifications to it. “Object code” means any non-source form of a work.\nA “Standard Interface” means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.\nThe “System Libraries” of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A “Major Component”, in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.\nThe “Corresponding Source” for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work’s System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.\nThe Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.\nThe Corresponding Source for a work in source code form is that same work.\n\nBasic Permissions.\n\nAll rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.\nYou may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.\nConveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.\n\nProtecting Users’ Legal Rights From Anti-Circumvention Law.\n\nNo covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.\nWhen you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work’s users, your or third parties’ legal rights to forbid circumvention of technological measures.\n\nConveying Verbatim Copies.\n\nYou may convey verbatim copies of the Program’s source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.\nYou may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.\n\nConveying Modified Source Versions.\n\nYou may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:\na) The work must carry prominent notices stating that you modified\nit, and giving a relevant date.\n\nb) The work must carry prominent notices stating that it is\nreleased under this License and any conditions added under section\n7.  This requirement modifies the requirement in section 4 to\n\"keep intact all notices\".\n\nc) You must license the entire work, as a whole, under this\nLicense to anyone who comes into possession of a copy.  This\nLicense will therefore apply, along with any applicable section 7\nadditional terms, to the whole of the work, and all its parts,\nregardless of how they are packaged.  This License gives no\npermission to license the work in any other way, but it does not\ninvalidate such permission if you have separately received it.\n\nd) If the work has interactive user interfaces, each must display\nAppropriate Legal Notices; however, if the Program has interactive\ninterfaces that do not display Appropriate Legal Notices, your\nwork need not make them do so.\nA compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an “aggregate” if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation’s users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.\n\nConveying Non-Source Forms.\n\nYou may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:\na) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by the\nCorresponding Source fixed on a durable physical medium\ncustomarily used for software interchange.\n\nb) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by a\nwritten offer, valid for at least three years and valid for as\nlong as you offer spare parts or customer support for that product\nmodel, to give anyone who possesses the object code either (1) a\ncopy of the Corresponding Source for all the software in the\nproduct that is covered by this License, on a durable physical\nmedium customarily used for software interchange, for a price no\nmore than your reasonable cost of physically performing this\nconveying of source, or (2) access to copy the\nCorresponding Source from a network server at no charge.\n\nc) Convey individual copies of the object code with a copy of the\nwritten offer to provide the Corresponding Source.  This\nalternative is allowed only occasionally and noncommercially, and\nonly if you received the object code with such an offer, in accord\nwith subsection 6b.\n\nd) Convey the object code by offering access from a designated\nplace (gratis or for a charge), and offer equivalent access to the\nCorresponding Source in the same way through the same place at no\nfurther charge.  You need not require recipients to copy the\nCorresponding Source along with the object code.  If the place to\ncopy the object code is a network server, the Corresponding Source\nmay be on a different server (operated by you or a third party)\nthat supports equivalent copying facilities, provided you maintain\nclear directions next to the object code saying where to find the\nCorresponding Source.  Regardless of what server hosts the\nCorresponding Source, you remain obligated to ensure that it is\navailable for as long as needed to satisfy these requirements.\n\ne) Convey the object code using peer-to-peer transmission, provided\nyou inform other peers where the object code and Corresponding\nSource of the work are being offered to the general public at no\ncharge under subsection 6d.\nA separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.\nA “User Product” is either (1) a “consumer product”, which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, “normally used” refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.\n“Installation Information” for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.\nIf you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).\nThe requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.\nCorresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.\n\nAdditional Terms.\n\n“Additional permissions” are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.\nWhen you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.\nNotwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:\na) Disclaiming warranty or limiting liability differently from the\nterms of sections 15 and 16 of this License; or\n\nb) Requiring preservation of specified reasonable legal notices or\nauthor attributions in that material or in the Appropriate Legal\nNotices displayed by works containing it; or\n\nc) Prohibiting misrepresentation of the origin of that material, or\nrequiring that modified versions of such material be marked in\nreasonable ways as different from the original version; or\n\nd) Limiting the use for publicity purposes of names of licensors or\nauthors of the material; or\n\ne) Declining to grant rights under trademark law for use of some\ntrade names, trademarks, or service marks; or\n\nf) Requiring indemnification of licensors and authors of that\nmaterial by anyone who conveys the material (or modified versions of\nit) with contractual assumptions of liability to the recipient, for\nany liability that these contractual assumptions directly impose on\nthose licensors and authors.\nAll other non-permissive additional terms are considered “further restrictions” within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.\nIf you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.\nAdditional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.\n\nTermination.\n\nYou may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).\nHowever, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.\nMoreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.\nTermination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.\n\nAcceptance Not Required for Having Copies.\n\nYou are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.\n\nAutomatic Licensing of Downstream Recipients.\n\nEach time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License.\nAn “entity transaction” is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party’s predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.\nYou may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.\n\nPatents.\n\nA “contributor” is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor’s “contributor version”.\nA contributor’s “essential patent claims” are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, “control” includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.\nEach contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor’s essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.\nIn the following three paragraphs, a “patent license” is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To “grant” such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.\nIf you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. “Knowingly relying” means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient’s use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.\nIf, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.\nA patent license is “discriminatory” if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.\nNothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.\n\nNo Surrender of Others’ Freedom.\n\nIf conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.\n\nRemote Network Interaction; Use with the GNU General Public License.\n\nNotwithstanding any other provision of this License, if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version by providing access to the Corresponding Source from a network server at no charge, through some standard or customary means of facilitating copying of software. This Corresponding Source shall include the Corresponding Source for any work covered by version 3 of the GNU General Public License that is incorporated pursuant to the following paragraph.\nNotwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the work with which it is combined will remain governed by version 3 of the GNU General Public License.\n\nRevised Versions of this License.\n\nThe Free Software Foundation may publish revised and/or new versions of the GNU Affero General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.\nEach version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU Affero General Public License “or any later version” applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU Affero General Public License, you may choose any version ever published by the Free Software Foundation.\nIf the Program specifies that a proxy can decide which future versions of the GNU Affero General Public License can be used, that proxy’s public statement of acceptance of a version permanently authorizes you to choose that version for the Program.\nLater license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.\n\nDisclaimer of Warranty.\n\nTHERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\nLimitation of Liability.\n\nIN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\nInterpretation of Sections 15 and 16.\n\nIf the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.\n                 END OF TERMS AND CONDITIONS\n\n        How to Apply These Terms to Your New Programs\nIf you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.\nTo do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the “copyright” line and a pointer to where the full notice is found.\n&lt;one line to give the program's name and a brief idea of what it does.&gt;\nCopyright (C) &lt;year&gt;  &lt;name of author&gt;\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as published\nby the Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.\nAlso add information on how to contact you by electronic and paper mail.\nIf your software can interact with users remotely through a computer network, you should also make sure that it provides a way for users to get its source. For example, if your program is a web application, its interface could display a “Source” link that leads users to an archive of the code. There are many ways you could offer source, and different solutions will be better for different programs; see section 13 for the specific requirements.\nYou should also get your employer (if you work as a programmer) or school, if any, to sign a “copyright disclaimer” for the program, if necessary. For more information on this, and how to apply and follow the GNU AGPL, see https://www.gnu.org/licenses/."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "handwriter",
    "section": "",
    "text": "Handwriter is designed to assist forensic examiners by analyzing handwritten documents against a closed set of potential writers. It determines the probability that each writer wrote the document. Whether you are a forensic document examiner, legal professional, academic, or simply curious about how statistics are applied to handwriting, handwriter provides an automated way to evaluate handwriting samples."
  },
  {
    "objectID": "index.html#view-a-demo",
    "href": "index.html#view-a-demo",
    "title": "handwriter",
    "section": "VIEW A DEMO",
    "text": "VIEW A DEMO\nView a demo of handwriter on handwritten documents from the CSAFE Handwriting Database. Go to demo."
  },
  {
    "objectID": "index.html#simulate-casework-with-example-documents",
    "href": "index.html#simulate-casework-with-example-documents",
    "title": "handwriter",
    "section": "SIMULATE CASEWORK WITH EXAMPLE DOCUMENTS",
    "text": "SIMULATE CASEWORK WITH EXAMPLE DOCUMENTS\n\nINSTALLATION\nHandwriter requires R, RStudio IDE, and JAGS.\n\nInstall R and RStudio from POSIT\nInstall JAGS from SourceForge\n\n\n\nLAUNCH THE APP\nOpen RStudio, navigate to the console window. Install the handwriterApp package. You only need to do this once.\n\ninstall.packages(\"handwriterApp\")\n\nEvery time you want to use the app, type:\n\nlibrary(handwriterApp)\nhandwriterApp()\n\nIn the pop-up window, click Open in Browser. If you use the app in the pop-up window instead of in a browser, some links will not work.\nClick Simulate Casework and follow the instructions in the app."
  },
  {
    "objectID": "index.html#process-a-handwriting-example",
    "href": "index.html#process-a-handwriting-example",
    "title": "handwriter",
    "section": "Process a Handwriting Example",
    "text": "Process a Handwriting Example\nThe file “phrase_example.png” is a scanned PNG of handwriting from the CSAFE Handwriting Database. This PNG image is included in the handwriter package in a folder called “extdata.” Use the helper function handwriter_example() to find the path to where “phrase_example.png” is saved on your computer.\nUse processDocument() to\n\nread the PNG file\nconvert the writing to black and white\nthin it to a one-pixel-wide skeleton\nplace nodes to break the writing into component shapes called graphs\n\n\nlibrary(handwriter)\nphrase &lt;- system.file(\"extdata\", \"phrase_example.png\", package = \"handwriter\")\ndoc &lt;- processDocument(phrase)\n#&gt; path in readPNGBinary: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/handwriter/extdata/phrase_example.png\n#&gt; Starting Processing...\n#&gt; Getting Nodes...\n#&gt; Skeletonizing writing...\n#&gt; Splitting document into components...\n#&gt; Merging nodes...\n#&gt; Finding paths...\n#&gt; Split paths into graphs...\n#&gt; Organizing graphs...\n#&gt; Creating graph lists...\n#&gt; Adding character features...\n#&gt; Document processing complete\n\nWe can view the image:\n\nplotImage(doc)\n\n\n\n\n\n\n\n\nWe can view the thinned image:\n\nplotImageThinned(doc)\n\n\n\n\n\n\n\n\nWe can also view the nodes:\n\nplotNodes(doc)"
  },
  {
    "objectID": "index.html#perform-writership-analysis",
    "href": "index.html#perform-writership-analysis",
    "title": "handwriter",
    "section": "Perform Writership Analysis",
    "text": "Perform Writership Analysis\nThis section explains how to perform handwriting analysis on questioned documents using handwriter. In particular, handwriter addresses the scenario where an investigator has a questioned handwritten document, a group of persons of interest has been identified, and the questioned document had to have been written by one of the persons of interest. For example, imagine that a handwritten bomb threat was left at a office building’s main desk and the police discover that the note had to have been written by one of the one hundred employees working that day. More details on this method can be found in [Crawford 2022].\n\nSTEP 1: Create the Main Directory and Subdirectories\nCreate a new folder called main_dir on your computer to hold the handwriting documents to be analyzed. When we create a new clustering template and fit a statistical model, those files will also be stored in this folder. Create a sub-folder in main_dir called data. In the data folder, create sub-folders called model_docs, questioned_docs, and template_docs. The folder structure will look like this:\n├── main_dir\n│   ├── data  \n│   │   ├── model_docs\n│   │   ├── questioned_docs\n│   │   ├── template_docs\n\n\nSTEP 2: Create a Cluster Template\nSave the handwritten documents that you want to use to train a new cluster template as PNG images in main_dir &gt; data &gt; template_docs. The template training documents need to be from writers that are NOT people of interest. Name all of the PNG images with a consistent format that includes an ID for the writer. For example, the PNG images could be named “writer0001.png”, “writer0002.png”, “writer0003.png” and so on.\nNext, create a new cluster template from the documents in main_dir &gt; data &gt; template_docs with the function make_clustering_template. This function\n\nProcesses the template training documents in template_docs, decomposing the handwriting into component shapes called graphs. The processed graphs are saved in RDS files in main_dir \\&gt; data \\&gt; template_graphs.\nDeletes graphs with more than 30 edges.\nRandomly selects K starting cluster centers using seed centers_seed for reproducibility.\nRuns a K-means algorithm with the K starting cluster centers and the selected graphs. The algorithm iteratively groups the selected graphs into K clusters. The final grouping of K clusters is the cluster template.\nStores the writer ID for each training document. writer_indices is a vector of the start and stop characters of the writer ID in the PNG image file name. For example, if the PNG images are named “writer0001.png”, “writer0002.png”, “writer0003.png”, and so on, writer_indices = c(7,10)\nPerforms some of the processes in parallel. Set the number of cores for parallel processing with num_dist_cores.\n\n\ntemplate &lt;- make_clustering_template(\n  main_dir = \"path/to/main_dir\",\n  template_docs = \"path/to/main_dir/data/template_docs\",\n  writer_indices = c(7,10),\n  centers_seed = 100,\n  K = 40,\n  num_dist_cores = 4,\n  max_iters = 25)\n\nType ?make_clustering_template in the RStudio console for more information about the function’s arguments.\nFor the remainder of this tutorial, we use a small example cluster template, example_cluster_template included in handwriter.\n\ntemplate &lt;- example_cluster_template\n\nThe idea behind the cluster template and the hierarchical model is that we can decompose a handwritten document into component graphs, assign each graph to the nearest cluster, the cluster with the closest shape, in the cluster template, and count the number of graphs in each cluster. We characterize writers by the number of a writer’s graphs that are assigned to each cluster. We refer to this as a writer’s cluster fill counts and it serves as writer profile.\nWe can plot the cluster fill counts for each writer in the template training set. First we format the template data to get the cluster fill counts in the proper format for the plotting function.\n\ntemplate_data &lt;- format_template_data(template = template)\nplot_cluster_fill_counts(template_data, facet = TRUE)\n\n\n\n\n\n\n\n\n\n\nSTEP 3: Fit a Hierarchical Model\nWe will use handwriting samples from each person of interest, calculate the cluster fill counts from each sample using the cluster template, and fit a hierarchical model to estimate each person of interest’s true cluster fill counts.\nSave your known handwriting samples from the persons of interest in main_dir \\&gt; data \\&gt; model_docs as PNG images. The model requires three handwriting samples from each person of interest. Each sample should be at least one paragraph in length. Name the PNG images with a consistent format so that all file names are the same length and the writer ID’s are in the same location. For example, “writer0001_doc1.png”, “writer0001_doc2.png”, “writer0001_doc3.png”, “writer0002_doc1.png”, and so on.\nWe fit a hierarchical model with the function fit_model. This function does the following:\n\nProcesses the model training documents in model_docs, decomposing the handwriting into component graphs. The processed graphs are saved in RDS files in main_dir \\&gt; data \\&gt; model_graphs.\nCalculates the cluster fill counts for each document by assigning each graph to the nearest cluster in the cluster template and counting the number of graphs assigned to each cluster. The cluster assignments are saved in main_dir &gt; data &gt; model_clusters.rds\nFits a hierarchical model to the cluster fill counts using the RJAGS package and draws posterior samples of model parameters with the coda package.\n\nIn this example, we use 4000 MCMC iterations for the model. The inputs writer_indices and doc_indices are the starting and stopping characters in the model training documents file names that contains the writer ID and a document name.\n\nmodel &lt;- fit_model(main_dir = \"path/to/main_dir\", \n                   model_docs = \"path/to/main_dir/data/model_docs\",\n                   num_iters = 4000, \n                   num_chains = 1, \n                   num_cores = 2,\n                   writer_indices = c(7, 10), \n                   doc_indices = c(11, 14))\n\nFor this tutorial, we will use the small example model, example_model, included in handwriter. This model was trained from three documents each from writers 9, 30, 203, 238, and 400 from the CSAFE handwriting database.\n\nmodel &lt;- example_model\n\nWe can plot the cluster fill counts for each person of interest. (NOTE: We had to format the template data to work with the plotting function, but the model data is already in the correct format.)\n\nplot_cluster_fill_counts(formatted_data=model, facet = TRUE)\n\n\n\n\n\n\n\n\nThe bars across the top of each graph show the Writer ID. Each graph has a line for each known handwriting sample from a given writer.\n\nHierarchical Model Variables and Burn-in\nIf you are interested in the variables used by the hierarchical model, continue reading this section. Otherwise, feel free to skip to the next section to learn how to analyze questioned documents.\nWe can list the variables in the model:\n\nnames(as.data.frame(coda::as.mcmc(model$fitted_model[[1]])))\n#&gt;  [1] \"eta[1]\"   \"eta[2]\"   \"eta[3]\"   \"eta[4]\"   \"eta[5]\"   \"gamma[1]\"\n#&gt;  [7] \"gamma[2]\" \"gamma[3]\" \"gamma[4]\" \"gamma[5]\" \"mu[1,1]\"  \"mu[2,1]\" \n#&gt; [13] \"mu[3,1]\"  \"mu[1,2]\"  \"mu[2,2]\"  \"mu[3,2]\"  \"mu[1,3]\"  \"mu[2,3]\" \n#&gt; [19] \"mu[3,3]\"  \"mu[1,4]\"  \"mu[2,4]\"  \"mu[3,4]\"  \"mu[1,5]\"  \"mu[2,5]\" \n#&gt; [25] \"mu[3,5]\"  \"pi[1,1]\"  \"pi[2,1]\"  \"pi[3,1]\"  \"pi[1,2]\"  \"pi[2,2]\" \n#&gt; [31] \"pi[3,2]\"  \"pi[1,3]\"  \"pi[2,3]\"  \"pi[3,3]\"  \"pi[1,4]\"  \"pi[2,4]\" \n#&gt; [37] \"pi[3,4]\"  \"pi[1,5]\"  \"pi[2,5]\"  \"pi[3,5]\"  \"tau[1,1]\" \"tau[2,1]\"\n#&gt; [43] \"tau[3,1]\" \"tau[1,2]\" \"tau[2,2]\" \"tau[3,2]\" \"tau[1,3]\" \"tau[2,3]\"\n#&gt; [49] \"tau[3,3]\" \"tau[1,4]\" \"tau[2,4]\" \"tau[3,4]\" \"tau[1,5]\" \"tau[2,5]\"\n#&gt; [55] \"tau[3,5]\"\n\nView a description of a variable with the about_variable function.\n\nabout_variable(variable = \"mu[1,1]\", model = model)\n#&gt; [1] \"Mu is the location parameter of a wrapped-Cauchy distribution for writer ID w0009 and cluster 1\"\n\nView a trace plot of a variable.\n\nplot_trace(variable = \"mu[1,1]\", model = model)\n\n\n\n\n\n\n\n\nIf we need to, we can drop the beginning MCMC iterations for burn-in. For example, if we want to drop the first 25 iterations, we use\n\nmodel &lt;- drop_burnin(model, burn_in = 25)\n\nIf we want to save the updated model as the current model for this project, replace model.rds in the data folder with\n\nsaveRDS(model, file='data/model.rds')\n\n\n\n\nAnalyze Questioned Documents\nSave your questioned document(s) in main_dir &gt; data &gt; questioned_docs as PNG images. Assign a new writer ID to the questioned documents and name the documents consistently. E.g. “unknown1000_doc1.png”, “unknown1001_doc1.png”, and so on.\nWe estimate the posterior probability of writership for each of the questioned documents with the function analyze_questioned_documents. This function does the following:\n\nProcess Questioned Document(s): Processes the questioned documents in questioned_docs, decomposing the handwriting into component graphs. The processed graphs are saved in RDS files in main_dir \\&gt; data \\&gt; questioned_graphs.\nEstimate the Writer Profile of the Questioned Document(s): Calculates the cluster fill counts for each questioned document by assigning each graph to the nearest cluster in the cluster template and counting the number of graphs assigned to each cluster. The cluster assignments are saved in main_dir \\&gt; data \\&gt; questioned_clusters.rds.\nEstimate the Posterior Probability of Writership: Uses the fitted model from Step 3 to estimate the posterior probability of writership for each questioned document and each person of interest. The results are saved in main_dir \\&gt; data \\&gt; analysis.rds.\n\n\nanalysis &lt;- analyze_questioned_documents(\n  main_dir = \"path/to/main_dir\", \n  questioned_docs = \"path/to/main_dir/questioned_docs\", \n  model = model, \n  writer_indices = c(8,11),\n  doc_indices = c(13,16),\n  num_cores = 2)\n\nLet’s pretend that a handwriting sample from each of the 5 “persons of interest” is a questioned document. These documents are also from the CSAFE handwriting database and have already been analyzed with example_model and the results are included in handwriter as example_analysis.\n\nanalysis &lt;- example_analysis\n\nView the cluster fill counts for each questioned document. Intuitively, the model assesses which writer’s cluster fill counts look the most like the cluster fill counts observed in each questioned document.\n\nplot_cluster_fill_counts(analysis, facet = TRUE)\n\n\n\n\n\n\n\n\nView the posterior probabilities of writership.\n\nanalysis$posterior_probabilities\n#&gt;         known_writer w0030_s03_pWOZ_r01\n#&gt; 1 known_writer_w0009                  0\n#&gt; 2 known_writer_w0030                  1\n#&gt; 3 known_writer_w0238                  0\n\n\nFor Research Only\nIn practice, we would not know who wrote a questioned document, but in research we often perform tests to evaluate models using data where we know the ground truth. Because in this example, we know the true writer of each questioned document, we can measure the accuracy of the model. We define accuracy as the average posterior probability assigned to the true writer. The accuracy of our model is\n\ncalculate_accuracy(analysis)\n#&gt; [1] 1"
  }
]